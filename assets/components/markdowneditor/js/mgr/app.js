var MarkdownEditor=function(e){e=e||{},MarkdownEditor.superclass.constructor.call(this,e)};Ext.override(MODx.panel.Resource,{}),Ext.extend(MarkdownEditor,Ext.Component,{initComponent:function(){MarkdownEditor.superclass.initComponent.call(this),Ext.onReady(this.render,this)},buildUI:function(){this.textarea.setDisplayed("none"),this.textarea.setWidth(0),this.textarea.setHeight(0);var e=Ext.DomHelper.insertBefore(this.textarea,{tag:"div","class":"markdown-container"});Ext.DomHelper.append(e,{tag:"div",id:"content-md","class":this.textarea.dom.className}),Ext.DomHelper.append(e,{tag:"div",id:"preview-md","class":"markdown-body"}),Ext.DomHelper.append(e,{tag:"div",id:"toolbox",cn:[{tag:"span",id:"preview-button",html:'<i class="icon icon-toggle-off"></i> Preview'},{tag:"span",id:"fullscreen-button",html:'<i class="icon icon-expand"></i>'}]}),Ext.DomHelper.append(e,{tag:"span",style:"clear: both"})},registerAce:function(){this.editor=ace.edit(Ext.DomQuery.selectNode("div#content-md")),this.editor.setOptions({maxLines:1/0,minLines:25,showPrintMargin:!1}),this.editor.renderer.setShowGutter(!1),this.editor.getSession().setValue(this.textarea.getValue()),this.editor.getSession().setMode("ace/mode/markdown"),this.editor.setTheme("ace/theme/monokai")},languageOverrides:{js:"javascript",html:"xml"},registerMarked:function(){var e=this,t=new marked.Renderer;t.code=function(e,t,i){if(this.options.highlight){var s=this.options.highlight(e,t);null!=s&&s!==e&&(i=!0,e=s)}return t?'<pre><code class="hljs '+this.options.langPrefix+escape(t,!0)+'">'+(i?e:escape(e,!0))+"\n</code></pre>\n":"<pre><code>"+(i?e:escape(e,!0))+"\n</code></pre>"},marked.setOptions({highlight:function(t,i){return e.languageOverrides[i]&&(i=e.languageOverrides[i]),-1!=hljs.listLanguages().indexOf(i)?hljs.highlight(i,t).value:t},renderer:t})},render:function(){var e=this;this.textarea=Ext.get("ta"),this.buildUI(),this.registerAce(),this.registerMarked();var t=Ext.get("preview-button"),i=Ext.get("fullscreen-button"),s=Ext.get("preview-md"),n=Ext.get("content-md"),o=n.parent(),r=MODx.load({xtype:"modx-treedrop",target:n,targetEl:n,onInsert:function(e){return this.insert(e),this.focus(),!0}.bind(this.editor),iframe:!0});this.textarea.on("destroy",function(){r.destroy()}),t.addListener("click",function(){s.isVisible()?(s.setDisplayed("none"),n.setDisplayed("block"),t.child("i").removeClass("icon-toggle-on"),t.child("i").addClass("icon-toggle-off")):(s.setDisplayed("block"),n.setDisplayed("none"),t.child("i").removeClass("icon-toggle-off"),t.child("i").addClass("icon-toggle-on"))}),i.addListener("click",function(){var e=i.child("i");e.hasClass("icon-expand")?(e.removeClass("icon-expand"),e.addClass("icon-compress"),o.addClass("fullscreen")):(e.addClass("icon-expand"),e.removeClass("icon-compress"),o.removeClass("fullscreen"))}),s.update(marked(this.editor.getValue())),this.editor.getSession().on("change",function(){s.update(marked(e.editor.getValue()))})}}),MarkdownEditor=new MarkdownEditor;
//# sourceMappingURL=data:application/json;base64,