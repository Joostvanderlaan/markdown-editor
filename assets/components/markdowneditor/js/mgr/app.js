Ext.ns("MarkdownEditor"),MarkdownEditor=function(e){e=e||{},MarkdownEditor.superclass.constructor.call(this,e)},Ext.extend(MarkdownEditor,Ext.Component,{window:{},config:{}}),Ext.reg("markdowneditor",MarkdownEditor),markdownEditor=new MarkdownEditor,markdownEditor.Editor=function(e){e=e||{},e.resource=MODx.request.id||0,markdownEditor.Editor.superclass.constructor.call(this,e),this.config=e},Ext.extend(markdownEditor.Editor,Ext.Component,{remarkable:"",initComponent:function(){MarkdownEditor.superclass.initComponent.call(this),Ext.onReady(this.render,this)},render:function(){this.textarea=Ext.get("ta"),this.buildUI(),this.registerAce(),this.registerMarked(),this.statusBar=Ext.get("status-bar"),this.preview=Ext.get("preview-md");var e=Ext.get("preview-button"),t=Ext.get("fullscreen-button"),i=Ext.get("content-md"),o=i.parent(),r=MODx.load({xtype:"modx-treedrop",target:i,targetEl:i,onInsert:function(e){return this.insert(e),this.focus(),!0}.bind(this.editor),iframe:!0});this.textarea.on("destroy",function(){r.destroy()}),e.addListener("click",function(){this.preview.isVisible()?(this.preview.setDisplayed("none"),i.setDisplayed("block"),this.statusBar.setDisplayed("block"),e.child("i").removeClass("icon-toggle-on"),e.child("i").addClass("icon-toggle-off")):(this.preview.setDisplayed("block"),i.setDisplayed("none"),this.statusBar.setDisplayed("none"),e.child("i").removeClass("icon-toggle-off"),e.child("i").addClass("icon-toggle-on"))},this),t.addListener("click",function(){var r=t.child("i");r.hasClass("icon-expand")?(r.removeClass("icon-expand"),r.addClass("icon-compress"),this.preview.setDisplayed("block"),i.setDisplayed("block"),e.hide(),o.addClass("fullscreen"),this.editor.setOption("maxLines",null)):(r.addClass("icon-expand"),r.removeClass("icon-compress"),this.preview.setDisplayed("none"),i.setDisplayed("block"),e.show(),o.removeClass("fullscreen"),this.editor.setOption("maxLines",1/0)),this.statusBar.setDisplayed("block"),this.editor.resize(!0)},this),markdownEditor.content.content&&this.editor.setValue(markdownEditor.content.content),this.editor.selection.clearSelection(),this.preview.update(this.parse(this.editor.getValue())),this.editor.getSession().on("change",function(){this.parse(this.editor.getValue())}.bind(this))},buildUI:function(){this.textarea.setDisplayed("none"),this.textarea.setWidth(0),this.textarea.setHeight(0),Ext.DomHelper.insertBefore(this.textarea,{tag:"textarea",name:"ta_markdown",id:"ta_markdown"}),this.taMarkdown=Ext.get("ta_markdown"),this.taMarkdown.setDisplayed("none"),this.taMarkdown.setWidth(0),this.taMarkdown.setHeight(0);var e=Ext.DomHelper.insertBefore(this.textarea,{tag:"div","class":"markdown-container"});Ext.DomHelper.append(e,{tag:"div",id:"content-md","class":this.textarea.dom.className}),Ext.DomHelper.append(e,{tag:"div",id:"preview-md","class":"markdown-body"}),Ext.DomHelper.append(e,{tag:"div",id:"toolbox",cn:[{tag:"span",id:"preview-button",html:'<i class="icon icon-toggle-off"></i> Preview'},{tag:"span",id:"fullscreen-button",html:'<i class="icon icon-expand"></i>'}]}),1==MODx.config["markdowneditor.upload.enable_image_upload"]||1==MODx.config["markdowneditor.upload.enable_file_upload"]?(Ext.DomHelper.append(e,{tag:"div",id:"status-bar",html:'<input class="hidden" id="inputFile" name="file" type="file" multiple>Attach files by dragging & dropping or <label for="inputFile" class="link">selecting them</label>.'}),Ext.get("inputFile").on("change",function(e,t){this.handleFiles(t.files),t.value=""},this)):Ext.DomHelper.append(e,{tag:"div",id:"status-bar",html:"Uploading files is disabled."}),Ext.DomHelper.append(e,{tag:"span",style:"clear: both"})},registerAce:function(){this.editor=ace.edit(Ext.DomQuery.selectNode("div#content-md")),this.editor.setOptions({maxLines:1/0,minLines:25,enableBasicAutocompletion:!0}),this.editor.renderer.setShowGutter(!0),this.editor.renderer.setScrollMargin(10,10),this.editor.getSession().setValue(this.textarea.getValue()),this.editor.getSession().setMode("ace/mode/markdown"),this.editor.setTheme("ace/theme/"+(MODx.config["markdowneditor.general.theme"]||"monokai"));var e=ace.require("ace/ext/language_tools"),t={getCompletions:function(e,t,i,o,r){return 0===o.length?(r(null,[]),void 0):(MODx.Ajax.request({url:markdownEditor.config.connectorUrl,params:{action:"mgr/resource/getlist",prefix:o},listeners:{success:{fn:function(e){r(null,e.results)},scope:this}}}),void 0)}};e.addCompleter(t),this.editor.container.addEventListener("dragenter",this.catchAndDoNothing,!1),this.editor.container.addEventListener("dragover",this.catchAndDoNothing,!1),this.editor.container.addEventListener("drop",this.drop.bind(this),!1)},registerMarked:function(){this.remarkable=new Remarkable({html:!0,highlight:function(e,t){if(t&&hljs.getLanguage(t))try{return hljs.highlight(t,e).value}catch(i){}try{return hljs.highlightAuto(e).value}catch(i){}return""}}),this.remarkable.inline.ruler.disable(["backticks"])},parse:function(e){var t=this.remarkable.render(e);t=t.replace(/%5B/g,"["),t=t.replace(/%5D/g,"]");var i=t.match(/<code(.|\s)*<\/code>/g);if(Ext.each(i,function(e){var i=e.replace(/\[\[/g,"&#91;&#91;");i=i.replace(/]]/g,"&#93;&#93;"),t=t.replace(e,i)}),1==MODx.config["markdowneditor.lp.parse_modx_tags"]){this.parseRequest&&clearTimeout(this.parseRequest);var o=parseInt(MODx.config["markdowneditor.lp.parse_modx_tags_timeout"]||300);this.parseRequest=setTimeout(function(){MODx.Ajax.request({url:markdownEditor.config.connectorUrl,params:{action:"mgr/editor/processcontent",content:t,resource:MODx.request.id},isUpload:!0,listeners:{success:{fn:function(e){this.preview.update(e.data)},scope:this}}})}.bind(this),o)}else this.preview.update(t);return this.taMarkdown.dom.value=this.editor.getValue(),this.textarea.dom.value=t,t},catchAndDoNothing:function(e){e.stopPropagation(),e.preventDefault()},drop:function(e){e.stopPropagation(),e.preventDefault(),(1==MODx.config["markdowneditor.upload.enable_image_upload"]||1==MODx.config["markdowneditor.upload.enable_file_upload"])&&this.handleFiles(e.dataTransfer.files)},handleFiles:function(e){Ext.each(e,function(e){var t,i=/^image\//.test(e.type);if(i){if(0==MODx.config["markdowneditor.upload.enable_image_upload"])return!0;if(e.size>parseInt(MODx.config["markdowneditor.upload.max_size"]))return t=this.createUploader("image",e.name),this.failUploader(t,"File is too big."),!0;1==MODx.config["markdowneditor.cropper.enable_cropper"]?MODx.load({xtype:"markdowneditor-window-cropper",file:e,md:this}).show():this.uploadFile(e,"image")}else{if(0==MODx.config["markdowneditor.upload.enable_file_upload"])return!0;if(e.size>parseInt(MODx.config["markdowneditor.upload.max_size"]))return t=this.createUploader("file",e.name),this.failUploader(t,"File is too big."),!0;this.uploadFile(e,"file")}},this)},uploadFile:function(e,t){t||(t="file");var i=this.createUploader(),o=new FormData;o.append("file",e),o.append("action","mgr/editor/"+t+"upload"),o.append("name",e.name),o.append("resource",this.config.resource);var r=new XMLHttpRequest;r.open("POST",markdownEditor.config.connectorUrl),r.setRequestHeader("Powered-By","MODx"),r.setRequestHeader("modAuth",Ext.Ajax.defaultHeaders.modAuth),r.upload.onprogress=function(e){if(e.lengthComputable){var t=e.loaded/e.total*100|0;i.child(".progress").setWidth(t+"%")}}.bind(this),r.onload=function(){if(200===r.status){var e=JSON.parse(r.responseText);if(1==e.success){i.remove();var o="image"==t?"!":"";this.editor.insert(o+"["+e.object.name+"]("+e.object.path+' "'+e.object.name+'")\n')}else this.failUploader(i,e.message)}}.bind(this),r.send(o)},createUploader:function(e,t){var i=Ext.DomHelper.insertFirst(this.statusBar,{tag:"div",html:'<div class="progress"></div><i class="icon icon-spinner icon-spin"></i> <span>Uploading '+e+": "+t+"</span>"});return Ext.get(i)},failUploader:function(e,t){e.child(".progress").addClass("error"),e.child(".progress").setWidth("100%"),e.child("i").addClass("remove-message"),e.child("i").replaceClass("icon-spinner","icon-remove"),e.child("i").removeClass("icon-spin"),e.child("span").dom.innerHTML+=" failed. "+t,e.child(".remove-message").on("click",function(){e.remove()})}}),MODx.loadRTE=function(){new markdownEditor.Editor},markdownEditor.window.Cropper=function(config){config=config||{},config.cropperSelector=config.cropperSelector||".image-upload-wrapper > img",Ext.applyIf(config,{modal:!1,layout:"auto",closeAction:"hide",shadow:!0,resizable:!0,collapsible:!0,maximizable:!1,autoHeight:!1,autoScroll:!0,allowDrop:!0,width:800,title:"Crop the image",cls:"modx-window",html:'<div class="image-upload-wrapper"><img src="'+URL.createObjectURL(config.file)+'"></div>',tbar:[{text:'<i class="icon icon-arrows"></i> Move',scope:this,param:"move",action:"setDragMode",handler:this.callCropperAction},{text:'<i class="icon icon-crop"></i> Crop',scope:this,param:"crop",action:"setDragMode",handler:this.callCropperAction},{text:'<i class="icon icon-search-plus"></i> Zoom In',scope:this,param:.1,action:"zoom",handler:this.callCropperAction},{text:'<i class="icon icon-search-minus"></i> Zoom Out',scope:this,param:-.1,action:"zoom",handler:this.callCropperAction},{text:'<i class="icon icon-rotate-left"></i> Rotate left',scope:this,param:-90,action:"rotate",handler:this.callCropperAction},{text:'<i class="icon icon-rotate-right"></i> Rotate right',scope:this,param:90,action:"rotate",handler:this.callCropperAction},{text:'<i class="icon icon-remove"></i> Clear cropper',scope:this,param:null,action:"clear",handler:this.callCropperAction}],buttons:[{text:_("cancel"),scope:this,handler:this.close},{text:"Upload",cls:"primary-button",scope:this,crop:0,handler:this.upload},{text:"Crop & Upload",cls:"primary-button",scope:this,crop:1,handler:this.upload}],listeners:{show:{fn:function(){var cropperOptions={};this.$cropperEl=$("#"+this.id+" "+config.cropperSelector);var ratio=MODx.config["markdowneditor.cropper.aspect_ratio"];ratio&&(ratio.replace(/[^-:x()\d/*+.]/g,""),ratio=eval(ratio),cropperOptions.aspectRatio=ratio),cropperOptions.crop=function(e){this.imageData=['{"x":'+e.x,'"y":'+e.y,'"height":'+e.height,'"width":'+e.width,'"rotate":'+e.rotate+"}"].join()}.bind(this),this.$cropperEl.cropper(cropperOptions)},scope:this}}}),markdownEditor.window.Cropper.superclass.constructor.call(this,config),this.config=config},Ext.extend(markdownEditor.window.Cropper,Ext.Window,{imageData:"",upload:function(e){var t=this.config.md.createUploader("image",this.config.file.name),i=new FormData;i.append("file",this.config.file),i.append("action","mgr/editor/imageupload"),i.append("imageData",this.imageData),i.append("name",this.config.file.name),i.append("crop",e.crop),i.append("resource",this.config.md.config.resource);var o=new XMLHttpRequest;o.open("POST",markdownEditor.config.connectorUrl),o.setRequestHeader("Powered-By","MODx"),o.setRequestHeader("modAuth",Ext.Ajax.defaultHeaders.modAuth),o.upload.onprogress=function(e){if(e.lengthComputable){var i=e.loaded/e.total*100|0;t.child(".progress").setWidth(i+"%")}}.bind(this),o.onload=function(){if(200===o.status){var e=JSON.parse(o.responseText);1==e.success?(t.remove(),this.config.md.editor.insert("!["+e.object.name+"]("+e.object.path+' "'+e.object.name+'")\n')):this.config.md.failUploader(t,e.message)}}.bind(this),o.send(i),this.close()},callCropperAction:function(e){this.$cropperEl.cropper(e.action,e.param)},close:function(){this.$cropperEl.cropper("destroy"),markdownEditor.window.Cropper.superclass.close.call(this)}}),Ext.reg("markdowneditor-window-cropper",markdownEditor.window.Cropper);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIm1hcmtkb3duZWRpdG9yLndpbmRvdy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsa0JBQ0EsZUFBQSxTQUFBLEdBQ0EsRUFBQSxNQUNBLGVBQUEsV0FBQSxZQUFBLEtBQUEsS0FBQSxJQUVBLElBQUEsT0FBQSxlQUFBLElBQUEsV0FDQSxVQUFBLFlBRUEsSUFBQSxJQUFBLGlCQUFBLGdCQUNBLGVBQUEsR0FBQSxnQkFFQSxlQUFBLE9BQUEsU0FBQSxHQUNBLEVBQUEsTUFDQSxFQUFBLFNBQUEsS0FBQSxRQUFBLElBQUEsRUFDQSxlQUFBLE9BQUEsV0FBQSxZQUFBLEtBQUEsS0FBQSxHQUNBLEtBQUEsT0FBQSxHQUVBLElBQUEsT0FBQSxlQUFBLE9BQUEsSUFBQSxXQUNBLFdBQUEsR0FDQSxjQUFBLFdBQ0EsZUFBQSxXQUFBLGNBQUEsS0FBQSxNQUVBLElBQUEsUUFBQSxLQUFBLE9BQUEsT0FHQSxPQUFBLFdBQ0EsS0FBQSxTQUFBLElBQUEsSUFBQSxNQUVBLEtBQUEsVUFDQSxLQUFBLGNBQ0EsS0FBQSxpQkFFQSxLQUFBLFVBQUEsSUFBQSxJQUFBLGNBQ0EsS0FBQSxRQUFBLElBQUEsSUFBQSxhQUVBLElBQUEsR0FBQSxJQUFBLElBQUEsa0JBQ0EsRUFBQSxJQUFBLElBQUEscUJBQ0EsRUFBQSxJQUFBLElBQUEsY0FDQSxFQUFBLEVBQUEsU0FFQSxFQUFBLEtBQUEsTUFDQSxNQUFBLGdCQUNBLE9BQUEsRUFDQSxTQUFBLEVBQ0EsU0FBQSxTQUFBLEdBR0EsTUFGQSxNQUFBLE9BQUEsR0FDQSxLQUFBLFNBQ0EsR0FDQSxLQUFBLEtBQUEsUUFDQSxRQUFBLEdBRUEsTUFBQSxTQUFBLEdBQUEsVUFBQSxXQUFBLEVBQUEsWUFFQSxFQUFBLFlBQUEsUUFBQSxXQUNBLEtBQUEsUUFBQSxhQUNBLEtBQUEsUUFBQSxhQUFBLFFBQ0EsRUFBQSxhQUFBLFNBQ0EsS0FBQSxVQUFBLGFBQUEsU0FFQSxFQUFBLE1BQUEsS0FBQSxZQUFBLGtCQUNBLEVBQUEsTUFBQSxLQUFBLFNBQUEscUJBRUEsS0FBQSxRQUFBLGFBQUEsU0FDQSxFQUFBLGFBQUEsUUFDQSxLQUFBLFVBQUEsYUFBQSxRQUVBLEVBQUEsTUFBQSxLQUFBLFlBQUEsbUJBQ0EsRUFBQSxNQUFBLEtBQUEsU0FBQSxvQkFFQSxNQUVBLEVBQUEsWUFBQSxRQUFBLFdBQ0EsR0FBQSxHQUFBLEVBQUEsTUFBQSxJQUVBLEdBQUEsU0FBQSxnQkFDQSxFQUFBLFlBQUEsZUFDQSxFQUFBLFNBQUEsaUJBRUEsS0FBQSxRQUFBLGFBQUEsU0FDQSxFQUFBLGFBQUEsU0FFQSxFQUFBLE9BRUEsRUFBQSxTQUFBLGNBRUEsS0FBQSxPQUFBLFVBQUEsV0FBQSxRQUdBLEVBQUEsU0FBQSxlQUNBLEVBQUEsWUFBQSxpQkFFQSxLQUFBLFFBQUEsYUFBQSxRQUNBLEVBQUEsYUFBQSxTQUVBLEVBQUEsT0FFQSxFQUFBLFlBQUEsY0FFQSxLQUFBLE9BQUEsVUFBQSxXQUFBLE1BR0EsS0FBQSxVQUFBLGFBQUEsU0FFQSxLQUFBLE9BQUEsUUFBQSxJQUNBLE1BRUEsZUFBQSxRQUFBLFNBQ0EsS0FBQSxPQUFBLFNBQUEsZUFBQSxRQUFBLFNBRUEsS0FBQSxPQUFBLFVBQUEsaUJBRUEsS0FBQSxRQUFBLE9BQUEsS0FBQSxNQUFBLEtBQUEsT0FBQSxhQUVBLEtBQUEsT0FBQSxhQUFBLEdBQUEsU0FBQSxXQUNBLEtBQUEsTUFBQSxLQUFBLE9BQUEsYUFDQSxLQUFBLFFBR0EsUUFBQSxXQUNBLEtBQUEsU0FBQSxhQUFBLFFBQ0EsS0FBQSxTQUFBLFNBQUEsR0FDQSxLQUFBLFNBQUEsVUFBQSxHQUVBLElBQUEsVUFBQSxhQUFBLEtBQUEsVUFDQSxJQUFBLFdBQ0EsS0FBQSxjQUNBLEdBQUEsZ0JBR0EsS0FBQSxXQUFBLElBQUEsSUFBQSxlQUNBLEtBQUEsV0FBQSxhQUFBLFFBQ0EsS0FBQSxXQUFBLFNBQUEsR0FDQSxLQUFBLFdBQUEsVUFBQSxFQUVBLElBQUEsR0FBQSxJQUFBLFVBQUEsYUFBQSxLQUFBLFVBQ0EsSUFBQSxNQUNBLFFBQUEsc0JBR0EsS0FBQSxVQUFBLE9BQUEsR0FDQSxJQUFBLE1BQ0EsR0FBQSxhQUNBLFFBQUEsS0FBQSxTQUFBLElBQUEsWUFHQSxJQUFBLFVBQUEsT0FBQSxHQUNBLElBQUEsTUFDQSxHQUFBLGFBQ0EsUUFBQSxrQkFHQSxJQUFBLFVBQUEsT0FBQSxHQUNBLElBQUEsTUFDQSxHQUFBLFVBQ0EsS0FDQSxJQUFBLE9BQ0EsR0FBQSxpQkFDQSxLQUFBLGlEQUVBLElBQUEsT0FDQSxHQUFBLG9CQUNBLEtBQUEsdUNBSUEsR0FBQSxLQUFBLE9BQUEsOENBQUEsR0FBQSxLQUFBLE9BQUEsNkNBQ0EsSUFBQSxVQUFBLE9BQUEsR0FDQSxJQUFBLE1BQ0EsR0FBQSxhQUNBLEtBQUEsNktBR0EsSUFBQSxJQUFBLGFBQUEsR0FBQSxTQUFBLFNBQUEsRUFBQSxHQUNBLEtBQUEsWUFBQSxFQUFBLE9BQ0EsRUFBQSxNQUFBLElBQ0EsT0FFQSxJQUFBLFVBQUEsT0FBQSxHQUNBLElBQUEsTUFDQSxHQUFBLGFBQ0EsS0FBQSxpQ0FJQSxJQUFBLFVBQUEsT0FBQSxHQUNBLElBQUEsT0FDQSxNQUFBLGlCQUlBLFlBQUEsV0FDQSxLQUFBLE9BQUEsSUFBQSxLQUFBLElBQUEsU0FBQSxXQUFBLG1CQUNBLEtBQUEsT0FBQSxZQUNBLFNBQUEsSUFDQSxTQUFBLEdBQ0EsMkJBQUEsSUFFQSxLQUFBLE9BQUEsU0FBQSxlQUFBLEdBQ0EsS0FBQSxPQUFBLFNBQUEsZ0JBQUEsR0FBQSxJQUNBLEtBQUEsT0FBQSxhQUFBLFNBQUEsS0FBQSxTQUFBLFlBQ0EsS0FBQSxPQUFBLGFBQUEsUUFBQSxxQkFDQSxLQUFBLE9BQUEsU0FBQSxjQUFBLEtBQUEsT0FBQSxpQ0FBQSxXQUVBLElBQUEsR0FBQSxJQUFBLFFBQUEsMEJBQ0EsR0FDQSxlQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLE1BQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLFNBRUEsS0FBQSxLQUFBLFNBQ0EsSUFBQSxlQUFBLE9BQUEsYUFDQSxRQUNBLE9BQUEsdUJBQ0EsT0FBQSxHQUVBLFdBQ0EsU0FDQSxHQUFBLFNBQUEsR0FDQSxFQUFBLEtBQUEsRUFBQSxVQUVBLE1BQUEsU0FYQSxTQWtCQSxHQUFBLGFBQUEsR0FHQSxLQUFBLE9BQUEsVUFBQSxpQkFBQSxZQUFBLEtBQUEsbUJBQUEsR0FDQSxLQUFBLE9BQUEsVUFBQSxpQkFBQSxXQUFBLEtBQUEsbUJBQUEsR0FDQSxLQUFBLE9BQUEsVUFBQSxpQkFBQSxPQUFBLEtBQUEsS0FBQSxLQUFBLE9BQUEsSUFHQSxlQUFBLFdBQ0EsS0FBQSxXQUFBLEdBQUEsYUFDQSxNQUFBLEVBQ0EsVUFBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsS0FBQSxZQUFBLEdBQ0EsSUFDQSxNQUFBLE1BQUEsVUFBQSxFQUFBLEdBQUEsTUFDQSxNQUFBLElBR0EsSUFDQSxNQUFBLE1BQUEsY0FBQSxHQUFBLE1BQ0EsTUFBQSxJQUVBLE1BQUEsTUFHQSxLQUFBLFdBQUEsT0FBQSxNQUFBLFNBQUEsZUFHQSxNQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsS0FBQSxXQUFBLE9BQUEsRUFFQSxHQUFBLEVBQUEsUUFBQSxPQUFBLEtBQ0EsRUFBQSxFQUFBLFFBQUEsT0FBQSxJQUVBLElBQUEsR0FBQSxFQUFBLE1BQUEsd0JBUUEsSUFQQSxJQUFBLEtBQUEsRUFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsUUFBQSxRQUFBLGFBQ0EsR0FBQSxFQUFBLFFBQUEsTUFBQSxjQUVBLEVBQUEsRUFBQSxRQUFBLEVBQUEsS0FHQSxHQUFBLEtBQUEsT0FBQSxxQ0FBQSxDQUNBLEtBQUEsY0FDQSxhQUFBLEtBQUEsYUFHQSxJQUFBLEdBQUEsU0FBQSxLQUFBLE9BQUEsOENBQUEsSUFFQSxNQUFBLGFBQUEsV0FBQSxXQUNBLEtBQUEsS0FBQSxTQUNBLElBQUEsZUFBQSxPQUFBLGFBQ0EsUUFDQSxPQUFBLDRCQUNBLFFBQUEsRUFDQSxTQUFBLEtBQUEsUUFBQSxJQUVBLFVBQUEsRUFDQSxXQUNBLFNBQ0EsR0FBQSxTQUFBLEdBQ0EsS0FBQSxRQUFBLE9BQUEsRUFBQSxPQUVBLE1BQUEsVUFJQSxLQUFBLE1BQUEsT0FFQSxNQUFBLFFBQUEsT0FBQSxFQU1BLE9BSEEsTUFBQSxXQUFBLElBQUEsTUFBQSxLQUFBLE9BQUEsV0FDQSxLQUFBLFNBQUEsSUFBQSxNQUFBLEVBRUEsR0FHQSxrQkFBQSxTQUFBLEdBQ0EsRUFBQSxrQkFDQSxFQUFBLGtCQUdBLEtBQUEsU0FBQSxHQUNBLEVBQUEsa0JBQ0EsRUFBQSxrQkFFQSxHQUFBLEtBQUEsT0FBQSw4Q0FBQSxHQUFBLEtBQUEsT0FBQSw4Q0FDQSxLQUFBLFlBQUEsRUFBQSxhQUFBLFFBSUEsWUFBQSxTQUFBLEdBQ0EsSUFBQSxLQUFBLEVBQUEsU0FBQSxHQUNBLEdBQ0EsR0FEQSxFQUFBLFdBQUEsS0FBQSxFQUFBLEtBR0EsSUFBQSxFQUFBLENBQ0EsR0FBQSxHQUFBLEtBQUEsT0FBQSw2Q0FBQSxPQUFBLENBRUEsSUFBQSxFQUFBLEtBQUEsU0FBQSxLQUFBLE9BQUEsbUNBSUEsTUFIQSxHQUFBLEtBQUEsZUFBQSxRQUFBLEVBQUEsTUFDQSxLQUFBLGFBQUEsRUFBQSxxQkFFQSxDQUdBLElBQUEsS0FBQSxPQUFBLHlDQUNBLEtBQUEsTUFDQSxNQUFBLGdDQUNBLEtBQUEsRUFDQSxHQUFBLE9BQ0EsT0FFQSxLQUFBLFdBQUEsRUFBQSxhQUVBLENBQ0EsR0FBQSxHQUFBLEtBQUEsT0FBQSw0Q0FBQSxPQUFBLENBRUEsSUFBQSxFQUFBLEtBQUEsU0FBQSxLQUFBLE9BQUEsbUNBSUEsTUFIQSxHQUFBLEtBQUEsZUFBQSxPQUFBLEVBQUEsTUFDQSxLQUFBLGFBQUEsRUFBQSxxQkFFQSxDQUdBLE1BQUEsV0FBQSxFQUFBLFVBR0EsT0FHQSxXQUFBLFNBQUEsRUFBQSxHQUNBLElBQUEsRUFBQSxPQUVBLElBQUEsR0FBQSxLQUFBLGlCQUVBLEVBQUEsR0FBQSxTQUNBLEdBQUEsT0FBQSxPQUFBLEdBQ0EsRUFBQSxPQUFBLFNBQUEsY0FBQSxFQUFBLFVBQ0EsRUFBQSxPQUFBLE9BQUEsRUFBQSxNQUNBLEVBQUEsT0FBQSxXQUFBLEtBQUEsT0FBQSxTQUVBLElBQUEsR0FBQSxHQUFBLGVBQ0EsR0FBQSxLQUFBLE9BQUEsZUFBQSxPQUFBLGNBQ0EsRUFBQSxpQkFBQSxhQUFBLFFBQ0EsRUFBQSxpQkFBQSxVQUFBLElBQUEsS0FBQSxlQUFBLFNBRUEsRUFBQSxPQUFBLFdBQUEsU0FBQSxHQUNBLEdBQUEsRUFBQSxpQkFBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLElBQUEsQ0FDQSxHQUFBLE1BQUEsYUFBQSxTQUFBLEVBQUEsT0FFQSxLQUFBLE1BRUEsRUFBQSxPQUFBLFdBQ0EsR0FBQSxNQUFBLEVBQUEsT0FBQSxDQUNBLEdBQUEsR0FBQSxLQUFBLE1BQUEsRUFBQSxhQUNBLElBQUEsR0FBQSxFQUFBLFFBQUEsQ0FDQSxFQUFBLFFBQ0EsSUFBQSxHQUFBLFNBQUEsRUFBQSxJQUFBLEVBQ0EsTUFBQSxPQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxLQUFBLEtBQUEsRUFBQSxPQUFBLEtBQUEsS0FBQSxFQUFBLE9BQUEsS0FBQSxZQUVBLE1BQUEsYUFBQSxFQUFBLEVBQUEsV0FHQSxLQUFBLE1BRUEsRUFBQSxLQUFBLElBR0EsZUFBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsSUFBQSxVQUFBLFlBQUEsS0FBQSxXQUNBLElBQUEsTUFDQSxLQUFBLDJGQUFBLEVBQUEsS0FBQSxFQUFBLFdBR0EsT0FBQSxLQUFBLElBQUEsSUFHQSxhQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsTUFBQSxhQUFBLFNBQUEsU0FDQSxFQUFBLE1BQUEsYUFBQSxTQUFBLFFBRUEsRUFBQSxNQUFBLEtBQUEsU0FBQSxrQkFDQSxFQUFBLE1BQUEsS0FBQSxhQUFBLGVBQUEsZUFDQSxFQUFBLE1BQUEsS0FBQSxZQUFBLGFBRUEsRUFBQSxNQUFBLFFBQUEsSUFBQSxXQUFBLFlBQUEsRUFDQSxFQUFBLE1BQUEsbUJBQUEsR0FBQSxRQUFBLFdBQ0EsRUFBQSxjQUtBLEtBQUEsUUFBQSxXQUNBLEdBQUEsZ0JBQUEsUUN0YUEsZUFBQSxPQUFBLFFBQUEsU0FBQSxRQUNBLE9BQUEsV0FDQSxPQUFBLGdCQUFBLE9BQUEsaUJBQUEsOEJBRUEsSUFBQSxRQUFBLFFBQ0EsT0FBQSxFQUNBLE9BQUEsT0FDQSxZQUFBLE9BQ0EsUUFBQSxFQUNBLFdBQUEsRUFDQSxhQUFBLEVBQ0EsYUFBQSxFQUNBLFlBQUEsRUFDQSxZQUFBLEVBQ0EsV0FBQSxFQUNBLE1BQUEsSUFDQSxNQUFBLGlCQUNBLElBQUEsY0FDQSxLQUFBLCtDQUFBLElBQUEsZ0JBQUEsT0FBQSxNQUFBLFdBQ0EsT0FDQSxLQUFBLHdDQUNBLE1BQUEsS0FDQSxNQUFBLE9BQ0EsT0FBQSxjQUNBLFFBQUEsS0FBQSxvQkFFQSxLQUFBLHNDQUNBLE1BQUEsS0FDQSxNQUFBLE9BQ0EsT0FBQSxjQUNBLFFBQUEsS0FBQSxvQkFFQSxLQUFBLGdEQUNBLE1BQUEsS0FDQSxNQUFBLEdBQ0EsT0FBQSxPQUNBLFFBQUEsS0FBQSxvQkFFQSxLQUFBLGtEQUNBLE1BQUEsS0FDQSxPQUFBLEdBQ0EsT0FBQSxPQUNBLFFBQUEsS0FBQSxvQkFFQSxLQUFBLG9EQUNBLE1BQUEsS0FDQSxNQUFBLElBQ0EsT0FBQSxTQUNBLFFBQUEsS0FBQSxvQkFFQSxLQUFBLHNEQUNBLE1BQUEsS0FDQSxNQUFBLEdBQ0EsT0FBQSxTQUNBLFFBQUEsS0FBQSxvQkFFQSxLQUFBLGlEQUNBLE1BQUEsS0FDQSxNQUFBLEtBQ0EsT0FBQSxRQUNBLFFBQUEsS0FBQSxvQkFFQSxVQUNBLEtBQUEsRUFBQSxVQUNBLE1BQUEsS0FDQSxRQUFBLEtBQUEsUUFFQSxLQUFBLFNBQ0EsSUFBQSxpQkFDQSxNQUFBLEtBQ0EsS0FBQSxFQUNBLFFBQUEsS0FBQSxTQUVBLEtBQUEsZ0JBQ0EsSUFBQSxpQkFDQSxNQUFBLEtBQ0EsS0FBQSxFQUNBLFFBQUEsS0FBQSxTQUVBLFdBQ0EsTUFDQSxHQUFBLFdBQ0EsR0FBQSxrQkFDQSxNQUFBLFdBQUEsRUFBQSxJQUFBLEtBQUEsR0FBQSxJQUFBLE9BQUEsZ0JBRUEsSUFBQSxPQUFBLEtBQUEsT0FBQSxzQ0FDQSxTQUNBLE1BQUEsUUFBQSxrQkFBQSxJQUNBLE1BQUEsS0FBQSxPQUVBLGVBQUEsWUFBQSxPQUdBLGVBQUEsS0FBQSxTQUFBLEdBQ0EsS0FBQSxXQUNBLFFBQUEsRUFBQSxFQUNBLE9BQUEsRUFBQSxFQUNBLFlBQUEsRUFBQSxPQUNBLFdBQUEsRUFBQSxNQUNBLFlBQUEsRUFBQSxPQUFBLEtBQ0EsUUFDQSxLQUFBLE1BRUEsS0FBQSxXQUFBLFFBQUEsaUJBRUEsTUFBQSxTQUlBLGVBQUEsT0FBQSxRQUFBLFdBQUEsWUFBQSxLQUFBLEtBQUEsUUFDQSxLQUFBLE9BQUEsUUFHQSxJQUFBLE9BQUEsZUFBQSxPQUFBLFFBQUEsSUFBQSxRQUNBLFVBQUEsR0FDQSxPQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsS0FBQSxPQUFBLEdBQUEsZUFBQSxRQUFBLEtBQUEsT0FBQSxLQUFBLE1BRUEsRUFBQSxHQUFBLFNBQ0EsR0FBQSxPQUFBLE9BQUEsS0FBQSxPQUFBLE1BQ0EsRUFBQSxPQUFBLFNBQUEsMEJBQ0EsRUFBQSxPQUFBLFlBQUEsS0FBQSxXQUNBLEVBQUEsT0FBQSxPQUFBLEtBQUEsT0FBQSxLQUFBLE1BQ0EsRUFBQSxPQUFBLE9BQUEsRUFBQSxNQUNBLEVBQUEsT0FBQSxXQUFBLEtBQUEsT0FBQSxHQUFBLE9BQUEsU0FFQSxJQUFBLEdBQUEsR0FBQSxlQUNBLEdBQUEsS0FBQSxPQUFBLGVBQUEsT0FBQSxjQUNBLEVBQUEsaUJBQUEsYUFBQSxRQUNBLEVBQUEsaUJBQUEsVUFBQSxJQUFBLEtBQUEsZUFBQSxTQUVBLEVBQUEsT0FBQSxXQUFBLFNBQUEsR0FDQSxHQUFBLEVBQUEsaUJBQUEsQ0FDQSxHQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxJQUFBLENBQ0EsR0FBQSxNQUFBLGFBQUEsU0FBQSxFQUFBLE9BRUEsS0FBQSxNQUVBLEVBQUEsT0FBQSxXQUNBLEdBQUEsTUFBQSxFQUFBLE9BQUEsQ0FDQSxHQUFBLEdBQUEsS0FBQSxNQUFBLEVBQUEsYUFFQSxJQUFBLEVBQUEsU0FDQSxFQUFBLFNBQ0EsS0FBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsRUFBQSxPQUFBLEtBQUEsS0FBQSxFQUFBLE9BQUEsS0FBQSxLQUFBLEVBQUEsT0FBQSxLQUFBLFNBRUEsS0FBQSxPQUFBLEdBQUEsYUFBQSxFQUFBLEVBQUEsV0FHQSxLQUFBLE1BRUEsRUFBQSxLQUFBLEdBRUEsS0FBQSxTQUdBLGtCQUFBLFNBQUEsR0FDQSxLQUFBLFdBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxRQUdBLE1BQUEsV0FDQSxLQUFBLFdBQUEsUUFBQSxXQUVBLGVBQUEsT0FBQSxRQUFBLFdBQUEsTUFBQSxLQUFBLFNBR0EsSUFBQSxJQUFBLGdDQUFBLGVBQUEsT0FBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJFeHQubnMoJ01hcmtkb3duRWRpdG9yJyk7XG5NYXJrZG93bkVkaXRvciA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBNYXJrZG93bkVkaXRvci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxjb25maWcpO1xufTtcbkV4dC5leHRlbmQoTWFya2Rvd25FZGl0b3IsRXh0LkNvbXBvbmVudCx7XG4gICAgd2luZG93Ont9LGNvbmZpZzoge31cbn0pO1xuRXh0LnJlZygnbWFya2Rvd25lZGl0b3InLE1hcmtkb3duRWRpdG9yKTtcbm1hcmtkb3duRWRpdG9yID0gbmV3IE1hcmtkb3duRWRpdG9yKCk7XG5cbm1hcmtkb3duRWRpdG9yLkVkaXRvciA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBjb25maWcucmVzb3VyY2UgPSBNT0R4LnJlcXVlc3QuaWQgfHwgMDtcbiAgICBtYXJrZG93bkVkaXRvci5FZGl0b3Iuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsY29uZmlnKTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbn07XG5FeHQuZXh0ZW5kKG1hcmtkb3duRWRpdG9yLkVkaXRvcixFeHQuQ29tcG9uZW50LHtcbiAgICByZW1hcmthYmxlOiAnJ1xuICAgICxpbml0Q29tcG9uZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgTWFya2Rvd25FZGl0b3Iuc3VwZXJjbGFzcy5pbml0Q29tcG9uZW50LmNhbGwodGhpcyk7XG5cbiAgICAgICAgRXh0Lm9uUmVhZHkodGhpcy5yZW5kZXIsIHRoaXMpO1xuICAgIH1cblxuICAgICxyZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnRleHRhcmVhID0gRXh0LmdldCgndGEnKTtcblxuICAgICAgICB0aGlzLmJ1aWxkVUkoKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckFjZSgpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyTWFya2VkKCk7XG5cbiAgICAgICAgdGhpcy5zdGF0dXNCYXIgPSBFeHQuZ2V0KCdzdGF0dXMtYmFyJyk7XG4gICAgICAgIHRoaXMucHJldmlldyA9IEV4dC5nZXQoJ3ByZXZpZXctbWQnKTtcblxuICAgICAgICB2YXIgcHJldmlld0J1dHRvbiA9IEV4dC5nZXQoJ3ByZXZpZXctYnV0dG9uJyk7XG4gICAgICAgIHZhciBmdWxsc2NyZWVuQnV0dG9uID0gRXh0LmdldCgnZnVsbHNjcmVlbi1idXR0b24nKTtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBFeHQuZ2V0KCdjb250ZW50LW1kJyk7XG4gICAgICAgIHZhciB3cmFwcGVyID0gY29udGVudC5wYXJlbnQoKTtcblxuICAgICAgICB2YXIgZHJvcFRhcmdldCA9IE1PRHgubG9hZCh7XG4gICAgICAgICAgICB4dHlwZTogJ21vZHgtdHJlZWRyb3AnLFxuICAgICAgICAgICAgdGFyZ2V0OiBjb250ZW50LFxuICAgICAgICAgICAgdGFyZ2V0RWw6IGNvbnRlbnQsXG4gICAgICAgICAgICBvbkluc2VydDogKGZ1bmN0aW9uKHMpe1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0KHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pLmJpbmQodGhpcy5lZGl0b3IpLFxuICAgICAgICAgICAgaWZyYW1lOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRleHRhcmVhLm9uKCdkZXN0cm95JywgZnVuY3Rpb24oKSB7ZHJvcFRhcmdldC5kZXN0cm95KCk7fSk7XG5cbiAgICAgICAgcHJldmlld0J1dHRvbi5hZGRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2aWV3LmlzVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3LnNldERpc3BsYXllZCgnbm9uZScpO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuc2V0RGlzcGxheWVkKCdibG9jaycpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzQmFyLnNldERpc3BsYXllZCgnYmxvY2snKTtcblxuICAgICAgICAgICAgICAgIHByZXZpZXdCdXR0b24uY2hpbGQoJ2knKS5yZW1vdmVDbGFzcygnaWNvbi10b2dnbGUtb24nKTtcbiAgICAgICAgICAgICAgICBwcmV2aWV3QnV0dG9uLmNoaWxkKCdpJykuYWRkQ2xhc3MoJ2ljb24tdG9nZ2xlLW9mZicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXcuc2V0RGlzcGxheWVkKCdibG9jaycpO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuc2V0RGlzcGxheWVkKCdub25lJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNCYXIuc2V0RGlzcGxheWVkKCdub25lJyk7XG5cbiAgICAgICAgICAgICAgICBwcmV2aWV3QnV0dG9uLmNoaWxkKCdpJykucmVtb3ZlQ2xhc3MoJ2ljb24tdG9nZ2xlLW9mZicpO1xuICAgICAgICAgICAgICAgIHByZXZpZXdCdXR0b24uY2hpbGQoJ2knKS5hZGRDbGFzcygnaWNvbi10b2dnbGUtb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgZnVsbHNjcmVlbkJ1dHRvbi5hZGRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaWNvbiA9IGZ1bGxzY3JlZW5CdXR0b24uY2hpbGQoJ2knKTtcblxuICAgICAgICAgICAgaWYgKGljb24uaGFzQ2xhc3MoJ2ljb24tZXhwYW5kJykpIHtcbiAgICAgICAgICAgICAgICBpY29uLnJlbW92ZUNsYXNzKCdpY29uLWV4cGFuZCcpO1xuICAgICAgICAgICAgICAgIGljb24uYWRkQ2xhc3MoJ2ljb24tY29tcHJlc3MnKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucHJldmlldy5zZXREaXNwbGF5ZWQoJ2Jsb2NrJyk7XG4gICAgICAgICAgICAgICAgY29udGVudC5zZXREaXNwbGF5ZWQoJ2Jsb2NrJyk7XG5cbiAgICAgICAgICAgICAgICBwcmV2aWV3QnV0dG9uLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgIHdyYXBwZXIuYWRkQ2xhc3MoJ2Z1bGxzY3JlZW4nKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLnNldE9wdGlvbignbWF4TGluZXMnLCBudWxsKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpY29uLmFkZENsYXNzKCdpY29uLWV4cGFuZCcpO1xuICAgICAgICAgICAgICAgIGljb24ucmVtb3ZlQ2xhc3MoJ2ljb24tY29tcHJlc3MnKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucHJldmlldy5zZXREaXNwbGF5ZWQoJ25vbmUnKTtcbiAgICAgICAgICAgICAgICBjb250ZW50LnNldERpc3BsYXllZCgnYmxvY2snKTtcblxuICAgICAgICAgICAgICAgIHByZXZpZXdCdXR0b24uc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgd3JhcHBlci5yZW1vdmVDbGFzcygnZnVsbHNjcmVlbicpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iuc2V0T3B0aW9uKCdtYXhMaW5lcycsIEluZmluaXR5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zdGF0dXNCYXIuc2V0RGlzcGxheWVkKCdibG9jaycpO1xuXG4gICAgICAgICAgICB0aGlzLmVkaXRvci5yZXNpemUodHJ1ZSk7XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIGlmIChtYXJrZG93bkVkaXRvci5jb250ZW50LmNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yLnNldFZhbHVlKG1hcmtkb3duRWRpdG9yLmNvbnRlbnQuY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZGl0b3Iuc2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKCk7XG5cbiAgICAgICAgdGhpcy5wcmV2aWV3LnVwZGF0ZSh0aGlzLnBhcnNlKHRoaXMuZWRpdG9yLmdldFZhbHVlKCkpKTtcblxuICAgICAgICB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgdGhpcy5wYXJzZSh0aGlzLmVkaXRvci5nZXRWYWx1ZSgpKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAsYnVpbGRVSTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuc2V0RGlzcGxheWVkKCdub25lJyk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuc2V0V2lkdGgoMCk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuc2V0SGVpZ2h0KDApO1xuXG4gICAgICAgIEV4dC5Eb21IZWxwZXIuaW5zZXJ0QmVmb3JlKHRoaXMudGV4dGFyZWEsIHtcbiAgICAgICAgICAgIHRhZzogJ3RleHRhcmVhJyxcbiAgICAgICAgICAgIG5hbWU6ICd0YV9tYXJrZG93bicsXG4gICAgICAgICAgICBpZDogJ3RhX21hcmtkb3duJ1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnRhTWFya2Rvd24gPSBFeHQuZ2V0KCd0YV9tYXJrZG93bicpO1xuICAgICAgICB0aGlzLnRhTWFya2Rvd24uc2V0RGlzcGxheWVkKCdub25lJyk7XG4gICAgICAgIHRoaXMudGFNYXJrZG93bi5zZXRXaWR0aCgwKTtcbiAgICAgICAgdGhpcy50YU1hcmtkb3duLnNldEhlaWdodCgwKTtcblxuICAgICAgICB2YXIgd3JhcHBlciA9IEV4dC5Eb21IZWxwZXIuaW5zZXJ0QmVmb3JlKHRoaXMudGV4dGFyZWEsIHtcbiAgICAgICAgICAgIHRhZzogJ2RpdicsXG4gICAgICAgICAgICBjbGFzczogJ21hcmtkb3duLWNvbnRhaW5lcidcbiAgICAgICAgfSk7XG5cbiAgICAgICAgRXh0LkRvbUhlbHBlci5hcHBlbmQod3JhcHBlcix7XG4gICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgaWQ6ICdjb250ZW50LW1kJyxcbiAgICAgICAgICAgIGNsYXNzOiB0aGlzLnRleHRhcmVhLmRvbS5jbGFzc05hbWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgRXh0LkRvbUhlbHBlci5hcHBlbmQod3JhcHBlcix7XG4gICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgaWQ6ICdwcmV2aWV3LW1kJyxcbiAgICAgICAgICAgIGNsYXNzOiAnbWFya2Rvd24tYm9keSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgRXh0LkRvbUhlbHBlci5hcHBlbmQod3JhcHBlcix7XG4gICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgaWQ6ICd0b29sYm94JyxcbiAgICAgICAgICAgIGNuOiBbe1xuICAgICAgICAgICAgICAgIHRhZzogJ3NwYW4nLFxuICAgICAgICAgICAgICAgIGlkOiAncHJldmlldy1idXR0b24nLFxuICAgICAgICAgICAgICAgIGh0bWw6ICc8aSBjbGFzcz1cImljb24gaWNvbi10b2dnbGUtb2ZmXCI+PC9pPiBQcmV2aWV3J1xuICAgICAgICAgICAgfSx7XG4gICAgICAgICAgICAgICAgdGFnOiAnc3BhbicsXG4gICAgICAgICAgICAgICAgaWQ6ICdmdWxsc2NyZWVuLWJ1dHRvbicsXG4gICAgICAgICAgICAgICAgaHRtbDogJzxpIGNsYXNzPVwiaWNvbiBpY29uLWV4cGFuZFwiPjwvaT4nXG4gICAgICAgICAgICB9XVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLnVwbG9hZC5lbmFibGVfaW1hZ2VfdXBsb2FkJ10gPT0gMSB8fCBNT0R4LmNvbmZpZ1snbWFya2Rvd25lZGl0b3IudXBsb2FkLmVuYWJsZV9maWxlX3VwbG9hZCddID09IDEpIHtcbiAgICAgICAgICAgIEV4dC5Eb21IZWxwZXIuYXBwZW5kKHdyYXBwZXIse1xuICAgICAgICAgICAgICAgIHRhZzogJ2RpdicsXG4gICAgICAgICAgICAgICAgaWQ6ICdzdGF0dXMtYmFyJyxcbiAgICAgICAgICAgICAgICBodG1sOiAnPGlucHV0IGNsYXNzPVwiaGlkZGVuXCIgaWQ9XCJpbnB1dEZpbGVcIiBuYW1lPVwiZmlsZVwiIHR5cGU9XCJmaWxlXCIgbXVsdGlwbGU+QXR0YWNoIGZpbGVzIGJ5IGRyYWdnaW5nICYgZHJvcHBpbmcgb3IgPGxhYmVsIGZvcj1cImlucHV0RmlsZVwiIGNsYXNzPVwibGlua1wiPnNlbGVjdGluZyB0aGVtPC9sYWJlbD4uJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIEV4dC5nZXQoJ2lucHV0RmlsZScpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbihlLCBpbnB1dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRmlsZXMoaW5wdXQuZmlsZXMpO1xuICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgRXh0LkRvbUhlbHBlci5hcHBlbmQod3JhcHBlcix7XG4gICAgICAgICAgICAgICAgdGFnOiAnZGl2JyxcbiAgICAgICAgICAgICAgICBpZDogJ3N0YXR1cy1iYXInLFxuICAgICAgICAgICAgICAgIGh0bWw6ICdVcGxvYWRpbmcgZmlsZXMgaXMgZGlzYWJsZWQuJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBFeHQuRG9tSGVscGVyLmFwcGVuZCh3cmFwcGVyLHtcbiAgICAgICAgICAgIHRhZzogJ3NwYW4nLFxuICAgICAgICAgICAgc3R5bGU6ICdjbGVhcjogYm90aCdcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLHJlZ2lzdGVyQWNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lZGl0b3IgPSBhY2UuZWRpdChFeHQuRG9tUXVlcnkuc2VsZWN0Tm9kZSgnZGl2I2NvbnRlbnQtbWQnKSk7XG4gICAgICAgIHRoaXMuZWRpdG9yLnNldE9wdGlvbnMoe1xuICAgICAgICAgICAgbWF4TGluZXM6IEluZmluaXR5LFxuICAgICAgICAgICAgbWluTGluZXM6IDI1LFxuICAgICAgICAgICAgZW5hYmxlQmFzaWNBdXRvY29tcGxldGlvbjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lZGl0b3IucmVuZGVyZXIuc2V0U2hvd0d1dHRlcih0cnVlKTtcbiAgICAgICAgdGhpcy5lZGl0b3IucmVuZGVyZXIuc2V0U2Nyb2xsTWFyZ2luKDEwLCAxMCk7XG4gICAgICAgIHRoaXMuZWRpdG9yLmdldFNlc3Npb24oKS5zZXRWYWx1ZSh0aGlzLnRleHRhcmVhLmdldFZhbHVlKCkpO1xuICAgICAgICB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkuc2V0TW9kZShcImFjZS9tb2RlL21hcmtkb3duXCIpO1xuICAgICAgICB0aGlzLmVkaXRvci5zZXRUaGVtZShcImFjZS90aGVtZS9cIiArIChNT0R4LmNvbmZpZ1snbWFya2Rvd25lZGl0b3IuZ2VuZXJhbC50aGVtZSddIHx8ICdtb25va2FpJykpO1xuXG4gICAgICAgIHZhciBsYW5nVG9vbHMgPSBhY2UucmVxdWlyZShcImFjZS9leHQvbGFuZ3VhZ2VfdG9vbHNcIik7XG4gICAgICAgIHZhciByZXNvdXJjZXNDb21wbGV0ZXIgPSB7XG4gICAgICAgICAgICBnZXRDb21wbGV0aW9uczogZnVuY3Rpb24oZWRpdG9yLCBzZXNzaW9uLCBwb3MsIHByZWZpeCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAocHJlZml4Lmxlbmd0aCA9PT0gMCkgeyBjYWxsYmFjayhudWxsLCBbXSk7IHJldHVybiB9XG5cbiAgICAgICAgICAgICAgICBNT0R4LkFqYXgucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogbWFya2Rvd25FZGl0b3IuY29uZmlnLmNvbm5lY3RvclVybFxuICAgICAgICAgICAgICAgICAgICAscGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdtZ3IvcmVzb3VyY2UvZ2V0bGlzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICxwcmVmaXg6IHByZWZpeFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHIucmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZTogdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbGFuZ1Rvb2xzLmFkZENvbXBsZXRlcihyZXNvdXJjZXNDb21wbGV0ZXIpO1xuXG5cbiAgICAgICAgdGhpcy5lZGl0b3IuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnZW50ZXJcIiwgdGhpcy5jYXRjaEFuZERvTm90aGluZywgZmFsc2UpO1xuICAgICAgICB0aGlzLmVkaXRvci5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsIHRoaXMuY2F0Y2hBbmREb05vdGhpbmcsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5lZGl0b3IuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIHRoaXMuZHJvcC5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLHJlZ2lzdGVyTWFya2VkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZW1hcmthYmxlID0gbmV3IFJlbWFya2FibGUoe1xuICAgICAgICAgICAgaHRtbDogdHJ1ZSxcbiAgICAgICAgICAgIGhpZ2hsaWdodDogZnVuY3Rpb24gKHN0ciwgbGFuZykge1xuICAgICAgICAgICAgICAgIGlmIChsYW5nICYmIGhsanMuZ2V0TGFuZ3VhZ2UobGFuZykpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBobGpzLmhpZ2hsaWdodChsYW5nLCBzdHIpLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhsanMuaGlnaGxpZ2h0QXV0byhzdHIpLnZhbHVlO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cblxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVtYXJrYWJsZS5pbmxpbmUucnVsZXIuZGlzYWJsZShbICdiYWNrdGlja3MnIF0pO1xuICAgIH1cblxuICAgICxwYXJzZTogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMucmVtYXJrYWJsZS5yZW5kZXIoaW5wdXQpO1xuXG4gICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKC8lNUIvZywgJ1snKTtcbiAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoLyU1RC9nLCAnXScpO1xuXG4gICAgICAgIHZhciBjb2RlQmxvY2tzID0gb3V0cHV0Lm1hdGNoKC88Y29kZSgufFxccykqPFxcL2NvZGU+L2cpO1xuICAgICAgICBFeHQuZWFjaChjb2RlQmxvY2tzLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICB2YXIgcmVwbGFjZWRJdGVtID0gaXRlbS5yZXBsYWNlKC9cXFtcXFsvZywgJyYjOTE7JiM5MTsnKTtcbiAgICAgICAgICAgIHJlcGxhY2VkSXRlbSA9IHJlcGxhY2VkSXRlbS5yZXBsYWNlKC9dXS9nLCAnJiM5MzsmIzkzOycpO1xuXG4gICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZShpdGVtLCByZXBsYWNlZEl0ZW0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLmxwLnBhcnNlX21vZHhfdGFncyddID09IDEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcnNlUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBhcnNlUmVxdWVzdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0aW1lb3V0ID0gcGFyc2VJbnQoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLmxwLnBhcnNlX21vZHhfdGFnc190aW1lb3V0J10gfHwgMzAwKTtcblxuICAgICAgICAgICAgdGhpcy5wYXJzZVJlcXVlc3QgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgTU9EeC5BamF4LnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IG1hcmtkb3duRWRpdG9yLmNvbmZpZy5jb25uZWN0b3JVcmxcbiAgICAgICAgICAgICAgICAgICAgLHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnbWdyL2VkaXRvci9wcm9jZXNzY29udGVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICxjb250ZW50OiBvdXRwdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICxyZXNvdXJjZTogTU9EeC5yZXF1ZXN0LmlkXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlzVXBsb2FkIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXcudXBkYXRlKHIuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZTogdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcyksIHRpbWVvdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcmV2aWV3LnVwZGF0ZShvdXRwdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50YU1hcmtkb3duLmRvbS52YWx1ZSA9IHRoaXMuZWRpdG9yLmdldFZhbHVlKCk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuZG9tLnZhbHVlID0gb3V0cHV0O1xuXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgLGNhdGNoQW5kRG9Ob3RoaW5nOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICAsZHJvcDogZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKE1PRHguY29uZmlnWydtYXJrZG93bmVkaXRvci51cGxvYWQuZW5hYmxlX2ltYWdlX3VwbG9hZCddID09IDEgfHwgTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLnVwbG9hZC5lbmFibGVfZmlsZV91cGxvYWQnXSA9PSAxKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUZpbGVzKGUuZGF0YVRyYW5zZmVyLmZpbGVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICxoYW5kbGVGaWxlczogZnVuY3Rpb24oZmlsZXMpIHtcbiAgICAgICAgRXh0LmVhY2goZmlsZXMsIGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgIHZhciBpc0ltYWdlID0gL15pbWFnZVxcLy8udGVzdChmaWxlLnR5cGUpO1xuICAgICAgICAgICAgdmFyIHVwbG9hZGVyO1xuXG4gICAgICAgICAgICBpZiAoaXNJbWFnZSkge1xuICAgICAgICAgICAgICAgIGlmIChNT0R4LmNvbmZpZ1snbWFya2Rvd25lZGl0b3IudXBsb2FkLmVuYWJsZV9pbWFnZV91cGxvYWQnXSA9PSAwKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGlmIChmaWxlLnNpemUgPiBwYXJzZUludChNT0R4LmNvbmZpZ1snbWFya2Rvd25lZGl0b3IudXBsb2FkLm1heF9zaXplJ10pKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZGVyID0gdGhpcy5jcmVhdGVVcGxvYWRlcignaW1hZ2UnLCBmaWxlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWxVcGxvYWRlcih1cGxvYWRlciwgJ0ZpbGUgaXMgdG9vIGJpZy4nKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLmNyb3BwZXIuZW5hYmxlX2Nyb3BwZXInXSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIE1PRHgubG9hZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB4dHlwZTogJ21hcmtkb3duZWRpdG9yLXdpbmRvdy1jcm9wcGVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLGZpbGU6IGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICxtZDogdGhpc1xuICAgICAgICAgICAgICAgICAgICB9KS5zaG93KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRGaWxlKGZpbGUsICdpbWFnZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKE1PRHguY29uZmlnWydtYXJrZG93bmVkaXRvci51cGxvYWQuZW5hYmxlX2ZpbGVfdXBsb2FkJ10gPT0gMCkgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmlsZS5zaXplID4gcGFyc2VJbnQoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLnVwbG9hZC5tYXhfc2l6ZSddKSkge1xuICAgICAgICAgICAgICAgICAgICB1cGxvYWRlciA9IHRoaXMuY3JlYXRlVXBsb2FkZXIoJ2ZpbGUnLCBmaWxlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWxVcGxvYWRlcih1cGxvYWRlciwgJ0ZpbGUgaXMgdG9vIGJpZy4nKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZEZpbGUoZmlsZSwgJ2ZpbGUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LCB0aGlzKTtcbiAgICB9XG5cbiAgICAsdXBsb2FkRmlsZTogZnVuY3Rpb24oZmlsZSwgdHlwZSkge1xuICAgICAgICBpZiAoIXR5cGUpIHR5cGUgPSAnZmlsZSc7XG5cbiAgICAgICAgdmFyIHVwbG9hZGVyID0gdGhpcy5jcmVhdGVVcGxvYWRlcigpO1xuXG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdhY3Rpb24nLCAnbWdyL2VkaXRvci8nICsgdHlwZSArICd1cGxvYWQnKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCduYW1lJywgZmlsZS5uYW1lKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdyZXNvdXJjZScsIHRoaXMuY29uZmlnLnJlc291cmNlKTtcblxuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhoci5vcGVuKCdQT1NUJywgbWFya2Rvd25FZGl0b3IuY29uZmlnLmNvbm5lY3RvclVybCk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdQb3dlcmVkLUJ5JywgJ01PRHgnKTtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ21vZEF1dGgnLCBFeHQuQWpheC5kZWZhdWx0SGVhZGVycy5tb2RBdXRoKTtcblxuICAgICAgICB4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlID0gKGV2ZW50LmxvYWRlZCAvIGV2ZW50LnRvdGFsICogMTAwIHwgMCk7XG4gICAgICAgICAgICAgICAgdXBsb2FkZXIuY2hpbGQoJy5wcm9ncmVzcycpLnNldFdpZHRoKGNvbXBsZXRlICsgJyUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5zdWNjZXNzID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbWFnZVByZWZpeCA9ICh0eXBlID09ICdpbWFnZScpID8gJyEnIDogJyc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmluc2VydChpbWFnZVByZWZpeCArICdbJyArIHJlcy5vYmplY3QubmFtZSArICddKCcgKyByZXMub2JqZWN0LnBhdGggKyAnIFwiJyArIHJlcy5vYmplY3QubmFtZSArICdcIilcXG4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWxVcGxvYWRlcih1cGxvYWRlciwgcmVzLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHhoci5zZW5kKGZvcm1EYXRhKTtcbiAgICB9XG5cbiAgICAsY3JlYXRlVXBsb2FkZXI6IGZ1bmN0aW9uKHR5cGUsIGZpbGVOYW1lKSB7XG4gICAgICAgIHZhciB1cGxvYWRlciA9IEV4dC5Eb21IZWxwZXIuaW5zZXJ0Rmlyc3QodGhpcy5zdGF0dXNCYXIse1xuICAgICAgICAgICAgdGFnOiAnZGl2JyxcbiAgICAgICAgICAgIGh0bWw6ICc8ZGl2IGNsYXNzPVwicHJvZ3Jlc3NcIj48L2Rpdj48aSBjbGFzcz1cImljb24gaWNvbi1zcGlubmVyIGljb24tc3BpblwiPjwvaT4gPHNwYW4+VXBsb2FkaW5nICcgKyB0eXBlICsgJzogJyArIGZpbGVOYW1lICsgJzwvc3Bhbj4nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBFeHQuZ2V0KHVwbG9hZGVyKTtcbiAgICB9XG5cbiAgICAsZmFpbFVwbG9hZGVyOiBmdW5jdGlvbih1cGxvYWRlciwgbWVzc2FnZSkge1xuICAgICAgICB1cGxvYWRlci5jaGlsZCgnLnByb2dyZXNzJykuYWRkQ2xhc3MoJ2Vycm9yJyk7XG4gICAgICAgIHVwbG9hZGVyLmNoaWxkKCcucHJvZ3Jlc3MnKS5zZXRXaWR0aCgnMTAwJScpO1xuXG4gICAgICAgIHVwbG9hZGVyLmNoaWxkKCdpJykuYWRkQ2xhc3MoJ3JlbW92ZS1tZXNzYWdlJyk7XG4gICAgICAgIHVwbG9hZGVyLmNoaWxkKCdpJykucmVwbGFjZUNsYXNzKCdpY29uLXNwaW5uZXInLCAnaWNvbi1yZW1vdmUnKTtcbiAgICAgICAgdXBsb2FkZXIuY2hpbGQoJ2knKS5yZW1vdmVDbGFzcygnaWNvbi1zcGluJyk7XG5cbiAgICAgICAgdXBsb2FkZXIuY2hpbGQoJ3NwYW4nKS5kb20uaW5uZXJIVE1MICs9ICcgZmFpbGVkLiAnICsgbWVzc2FnZTtcbiAgICAgICAgdXBsb2FkZXIuY2hpbGQoJy5yZW1vdmUtbWVzc2FnZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdXBsb2FkZXIucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG5NT0R4LmxvYWRSVEUgPSBmdW5jdGlvbihpZCkge1xuICAgIG5ldyBtYXJrZG93bkVkaXRvci5FZGl0b3IoKTtcbn07XG4iLCJtYXJrZG93bkVkaXRvci53aW5kb3cuQ3JvcHBlciA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBjb25maWcuY3JvcHBlclNlbGVjdG9yID0gY29uZmlnLmNyb3BwZXJTZWxlY3RvciB8fCAnLmltYWdlLXVwbG9hZC13cmFwcGVyID4gaW1nJztcblxuICAgIEV4dC5hcHBseUlmKGNvbmZpZyx7XG4gICAgICAgIG1vZGFsOiBmYWxzZVxuICAgICAgICAsbGF5b3V0OiAnYXV0bydcbiAgICAgICAgLGNsb3NlQWN0aW9uOiAnaGlkZSdcbiAgICAgICAgLHNoYWRvdzogdHJ1ZVxuICAgICAgICAscmVzaXphYmxlOiB0cnVlXG4gICAgICAgICxjb2xsYXBzaWJsZTogdHJ1ZVxuICAgICAgICAsbWF4aW1pemFibGU6IGZhbHNlXG4gICAgICAgICxhdXRvSGVpZ2h0OiBmYWxzZVxuICAgICAgICAsYXV0b1Njcm9sbDogdHJ1ZVxuICAgICAgICAsYWxsb3dEcm9wOiB0cnVlXG4gICAgICAgICx3aWR0aDogODAwXG4gICAgICAgICx0aXRsZTogJ0Nyb3AgdGhlIGltYWdlJ1xuICAgICAgICAsY2xzOiAnbW9keC13aW5kb3cnXG4gICAgICAgICxodG1sOiAnPGRpdiBjbGFzcz1cImltYWdlLXVwbG9hZC13cmFwcGVyXCI+PGltZyBzcmM9XCInICsgVVJMLmNyZWF0ZU9iamVjdFVSTChjb25maWcuZmlsZSkgKyAnXCI+PC9kaXY+J1xuICAgICAgICAsdGJhcjogW3tcbiAgICAgICAgICAgIHRleHQ6ICc8aSBjbGFzcz1cImljb24gaWNvbi1hcnJvd3NcIj48L2k+IE1vdmUnXG4gICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICxwYXJhbTogJ21vdmUnXG4gICAgICAgICAgICAsYWN0aW9uOiAnc2V0RHJhZ01vZGUnXG4gICAgICAgICAgICAsaGFuZGxlcjogdGhpcy5jYWxsQ3JvcHBlckFjdGlvblxuICAgICAgICB9LHtcbiAgICAgICAgICAgIHRleHQ6ICc8aSBjbGFzcz1cImljb24gaWNvbi1jcm9wXCI+PC9pPiBDcm9wJ1xuICAgICAgICAgICAgLHNjb3BlOiB0aGlzXG4gICAgICAgICAgICAscGFyYW06ICdjcm9wJ1xuICAgICAgICAgICAgLGFjdGlvbjogJ3NldERyYWdNb2RlJ1xuICAgICAgICAgICAgLGhhbmRsZXI6IHRoaXMuY2FsbENyb3BwZXJBY3Rpb25cbiAgICAgICAgfSx7XG4gICAgICAgICAgICB0ZXh0OiAnPGkgY2xhc3M9XCJpY29uIGljb24tc2VhcmNoLXBsdXNcIj48L2k+IFpvb20gSW4nXG4gICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICxwYXJhbTogMC4xXG4gICAgICAgICAgICAsYWN0aW9uOiAnem9vbSdcbiAgICAgICAgICAgICxoYW5kbGVyOiB0aGlzLmNhbGxDcm9wcGVyQWN0aW9uXG4gICAgICAgIH0se1xuICAgICAgICAgICAgdGV4dDogJzxpIGNsYXNzPVwiaWNvbiBpY29uLXNlYXJjaC1taW51c1wiPjwvaT4gWm9vbSBPdXQnXG4gICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICxwYXJhbTogLTAuMVxuICAgICAgICAgICAgLGFjdGlvbjogJ3pvb20nXG4gICAgICAgICAgICAsaGFuZGxlcjogdGhpcy5jYWxsQ3JvcHBlckFjdGlvblxuICAgICAgICB9LHtcbiAgICAgICAgICAgIHRleHQ6ICc8aSBjbGFzcz1cImljb24gaWNvbi1yb3RhdGUtbGVmdFwiPjwvaT4gUm90YXRlIGxlZnQnXG4gICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICxwYXJhbTogLTkwXG4gICAgICAgICAgICAsYWN0aW9uOiAncm90YXRlJ1xuICAgICAgICAgICAgLGhhbmRsZXI6IHRoaXMuY2FsbENyb3BwZXJBY3Rpb25cbiAgICAgICAgfSx7XG4gICAgICAgICAgICB0ZXh0OiAnPGkgY2xhc3M9XCJpY29uIGljb24tcm90YXRlLXJpZ2h0XCI+PC9pPiBSb3RhdGUgcmlnaHQnXG4gICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICxwYXJhbTogOTBcbiAgICAgICAgICAgICxhY3Rpb246ICdyb3RhdGUnXG4gICAgICAgICAgICAsaGFuZGxlcjogdGhpcy5jYWxsQ3JvcHBlckFjdGlvblxuICAgICAgICB9LHtcbiAgICAgICAgICAgIHRleHQ6ICc8aSBjbGFzcz1cImljb24gaWNvbi1yZW1vdmVcIj48L2k+IENsZWFyIGNyb3BwZXInXG4gICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICxwYXJhbTogbnVsbFxuICAgICAgICAgICAgLGFjdGlvbjogJ2NsZWFyJ1xuICAgICAgICAgICAgLGhhbmRsZXI6IHRoaXMuY2FsbENyb3BwZXJBY3Rpb25cbiAgICAgICAgfV1cbiAgICAgICAgLGJ1dHRvbnM6IFt7XG4gICAgICAgICAgICB0ZXh0OiBfKCdjYW5jZWwnKVxuICAgICAgICAgICAgLHNjb3BlOiB0aGlzXG4gICAgICAgICAgICAsaGFuZGxlcjogdGhpcy5jbG9zZVxuICAgICAgICB9LHtcbiAgICAgICAgICAgIHRleHQ6ICdVcGxvYWQnXG4gICAgICAgICAgICAsY2xzOiAncHJpbWFyeS1idXR0b24nXG4gICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICxjcm9wOiAwXG4gICAgICAgICAgICAsaGFuZGxlcjogdGhpcy51cGxvYWRcbiAgICAgICAgfSx7XG4gICAgICAgICAgICB0ZXh0OiAnQ3JvcCAmIFVwbG9hZCdcbiAgICAgICAgICAgICxjbHM6ICdwcmltYXJ5LWJ1dHRvbidcbiAgICAgICAgICAgICxzY29wZTogdGhpc1xuICAgICAgICAgICAgLGNyb3A6IDFcbiAgICAgICAgICAgICxoYW5kbGVyOiB0aGlzLnVwbG9hZFxuICAgICAgICB9XVxuICAgICAgICAsbGlzdGVuZXJzOiB7XG4gICAgICAgICAgICAnc2hvdyc6IHtcbiAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjcm9wcGVyT3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjcm9wcGVyRWwgPSAkKCcjJyArIHRoaXMuaWQgKyAnICcgKyBjb25maWcuY3JvcHBlclNlbGVjdG9yKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmF0aW8gPSBNT0R4LmNvbmZpZ1snbWFya2Rvd25lZGl0b3IuY3JvcHBlci5hc3BlY3RfcmF0aW8nXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhdGlvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXRpby5yZXBsYWNlKC9bXi06eCgpXFxkLyorLl0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF0aW8gPSBldmFsKHJhdGlvKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY3JvcHBlck9wdGlvbnMuYXNwZWN0UmF0aW8gPSByYXRpbztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNyb3BwZXJPcHRpb25zLmNyb3AgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZURhdGEgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3tcInhcIjonICsgZGF0YS54LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcInlcIjonICsgZGF0YS55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcImhlaWdodFwiOicgKyBkYXRhLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCJ3aWR0aFwiOicgKyBkYXRhLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcInJvdGF0ZVwiOicgKyBkYXRhLnJvdGF0ZSArICd9J1xuICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCk7XG4gICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjcm9wcGVyRWwuY3JvcHBlcihjcm9wcGVyT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzY29wZTogdGhpc1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgbWFya2Rvd25FZGl0b3Iud2luZG93LkNyb3BwZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsY29uZmlnKTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcblxufTtcbkV4dC5leHRlbmQobWFya2Rvd25FZGl0b3Iud2luZG93LkNyb3BwZXIsIEV4dC5XaW5kb3cse1xuICAgIGltYWdlRGF0YTogJydcbiAgICAsdXBsb2FkOiBmdW5jdGlvbihidXR0b24pIHtcbiAgICAgICAgdmFyIHVwbG9hZGVyID0gdGhpcy5jb25maWcubWQuY3JlYXRlVXBsb2FkZXIoJ2ltYWdlJywgdGhpcy5jb25maWcuZmlsZS5uYW1lKTtcblxuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgdGhpcy5jb25maWcuZmlsZSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnYWN0aW9uJywgJ21nci9lZGl0b3IvaW1hZ2V1cGxvYWQnKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdpbWFnZURhdGEnLCB0aGlzLmltYWdlRGF0YSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnbmFtZScsIHRoaXMuY29uZmlnLmZpbGUubmFtZSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnY3JvcCcsIGJ1dHRvbi5jcm9wKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdyZXNvdXJjZScsIHRoaXMuY29uZmlnLm1kLmNvbmZpZy5yZXNvdXJjZSk7XG5cbiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbignUE9TVCcsIG1hcmtkb3duRWRpdG9yLmNvbmZpZy5jb25uZWN0b3JVcmwpO1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignUG93ZXJlZC1CeScsICdNT0R4Jyk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdtb2RBdXRoJywgRXh0LkFqYXguZGVmYXVsdEhlYWRlcnMubW9kQXV0aCk7XG5cbiAgICAgICAgeGhyLnVwbG9hZC5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQubGVuZ3RoQ29tcHV0YWJsZSkge1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZSA9IChldmVudC5sb2FkZWQgLyBldmVudC50b3RhbCAqIDEwMCB8IDApO1xuICAgICAgICAgICAgICAgIHVwbG9hZGVyLmNoaWxkKCcucHJvZ3Jlc3MnKS5zZXRXaWR0aChjb21wbGV0ZSArICclJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlcy5zdWNjZXNzID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm1kLmVkaXRvci5pbnNlcnQoJyFbJyArIHJlcy5vYmplY3QubmFtZSArICddKCcgKyByZXMub2JqZWN0LnBhdGggKyAnIFwiJyArIHJlcy5vYmplY3QubmFtZSArICdcIilcXG4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5tZC5mYWlsVXBsb2FkZXIodXBsb2FkZXIsIHJlcy5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgICAgICB4aHIuc2VuZChmb3JtRGF0YSk7XG5cbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cblxuICAgICxjYWxsQ3JvcHBlckFjdGlvbjogZnVuY3Rpb24oYnRuKSB7XG4gICAgICAgIHRoaXMuJGNyb3BwZXJFbC5jcm9wcGVyKGJ0bi5hY3Rpb24sIGJ0bi5wYXJhbSk7XG4gICAgfVxuXG4gICAgLGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy4kY3JvcHBlckVsLmNyb3BwZXIoXCJkZXN0cm95XCIpO1xuXG4gICAgICAgIG1hcmtkb3duRWRpdG9yLndpbmRvdy5Dcm9wcGVyLnN1cGVyY2xhc3MuY2xvc2UuY2FsbCh0aGlzKTtcbiAgICB9XG59KTtcbkV4dC5yZWcoJ21hcmtkb3duZWRpdG9yLXdpbmRvdy1jcm9wcGVyJyxtYXJrZG93bkVkaXRvci53aW5kb3cuQ3JvcHBlcik7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=