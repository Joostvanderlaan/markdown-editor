var MarkdownEditor=function(e){e=e||{},MarkdownEditor.superclass.constructor.call(this,e)};Ext.override(MODx.panel.Resource,{}),Ext.extend(MarkdownEditor,Ext.Component,{window:{},remarkable:"",initComponent:function(){MarkdownEditor.superclass.initComponent.call(this),Ext.onReady(this.render,this)},parseRequest:"",parse:function(e){var t=this.remarkable.render(e);if(t=t.replace(/%5B/g,"["),t=t.replace(/%5D/g,"]"),1==MODx.config["markdowneditor.lp.parse_modx_tags"]){this.parseRequest&&clearTimeout(this.parseRequest);var i=parseInt(MODx.config["markdowneditor.lp.parse_modx_tags_timeout"]||300);this.parseRequest=setTimeout(function(){MODx.Ajax.request({url:MarkdownEditor_config.connectorUrl,params:{action:"mgr/editor/processcontent",content:t,resource:MODx.request.id},isUpload:!0,listeners:{success:{fn:function(e){Ext.get("preview-md").update(e.data)},scope:this}}})},i)}else Ext.get("preview-md").update(t);return this.taMarkdown.dom.value=this.editor.getValue(),this.textarea.dom.value=t,t},buildUI:function(){this.textarea.setDisplayed("none"),this.textarea.setWidth(0),this.textarea.setHeight(0),Ext.DomHelper.insertBefore(this.textarea,{tag:"textarea",name:"ta_markdown",id:"ta_markdown"}),this.taMarkdown=Ext.get("ta_markdown"),this.taMarkdown.setDisplayed("none"),this.taMarkdown.setWidth(0),this.taMarkdown.setHeight(0);var e=Ext.DomHelper.insertBefore(this.textarea,{tag:"div","class":"markdown-container"});Ext.DomHelper.append(e,{tag:"div",id:"content-md","class":this.textarea.dom.className}),Ext.DomHelper.append(e,{tag:"div",id:"preview-md","class":"markdown-body"}),Ext.DomHelper.append(e,{tag:"div",id:"toolbox",cn:[{tag:"span",id:"preview-button",html:'<i class="icon icon-toggle-off"></i> Preview'},{tag:"span",id:"fullscreen-button",html:'<i class="icon icon-expand"></i>'}]}),Ext.DomHelper.append(e,{tag:"div",id:"status-bar",html:'<input class="hidden" id="inputFile" name="file" type="file" multiple>Attach files by dragging & dropping or <label for="inputFile" class="link">selecting them</label>.'}),Ext.get("inputFile").on("change",function(e,t){this.handleFiles(t.files),t.value=""},this),Ext.DomHelper.append(e,{tag:"span",style:"clear: both"})},registerAce:function(){this.editor=ace.edit(Ext.DomQuery.selectNode("div#content-md")),this.editor.setOptions({maxLines:1/0,minLines:25,enableBasicAutocompletion:!0}),this.editor.renderer.setShowGutter(!0),this.editor.renderer.setScrollMargin(10,10),this.editor.getSession().setValue(this.textarea.getValue()),this.editor.getSession().setMode("ace/mode/markdown"),this.editor.setTheme("ace/theme/monokai");var e=ace.require("ace/ext/language_tools"),t={getCompletions:function(e,t,i,s,n){return 0===s.length?(n(null,[]),void 0):(MODx.Ajax.request({url:MarkdownEditor_config.connectorUrl,params:{action:"mgr/resource/getlist",prefix:s},listeners:{success:{fn:function(e){n(null,e.results)},scope:this}}}),void 0)}};e.addCompleter(t),this.editor.container.addEventListener("dragenter",this.catchAndDoNothing,!1),this.editor.container.addEventListener("dragover",this.catchAndDoNothing,!1),this.editor.container.addEventListener("drop",this.drop.bind(this),!1)},catchAndDoNothing:function(e){e.stopPropagation(),e.preventDefault()},drop:function(e){e.stopPropagation(),e.preventDefault(),this.handleFiles(e.dataTransfer.files)},handleFiles:function(e){Ext.each(e,function(e){var t=/^image\//.test(e.type);t?1==MODx.config["markdowneditor.cropper.enable_cropper"]?MODx.load({xtype:"markdowneditor-window-cropper",file:e,md:this}).show():this.uploadFile(e,"image"):this.uploadFile(e,"file")},this)},uploadFile:function(e,t){t||(t="file");var i=Ext.get("status-bar"),s=Ext.DomHelper.insertFirst(i,{tag:"div",id:"upload_progress",html:'<div class="progress"></div><i class="icon icon-spinner icon-spin"></i> Uploading '+t+": "+e.name}),n=new FormData;n.append("file",e),n.append("action","mgr/editor/"+t+"upload"),n.append("name",e.name);var o=new XMLHttpRequest;o.open("POST",MarkdownEditor_config.connectorUrl),o.setRequestHeader("Powered-By","MODx"),o.setRequestHeader("modAuth",Ext.Ajax.defaultHeaders.modAuth),o.upload.onprogress=function(e){if(e.lengthComputable){var t=e.loaded/e.total*100|0;i.child(".progress").setWidth(t+"%")}},o.onload=function(){if(200===o.status){var e=JSON.parse(o.responseText);if(1==e.success){s.remove();var i="image"==t?"!":"";this.editor.insert(i+"["+e.object.name+"]("+e.object.path+' "'+e.object.name+'")\n')}}}.bind(this),o.send(n)},registerMarked:function(){this.remarkable=new Remarkable({html:!0,highlight:function(e,t){if(t&&hljs.getLanguage(t))try{return hljs.highlight(t,e).value}catch(i){}try{return hljs.highlightAuto(e).value}catch(i){}return""}}),this.remarkable.inline.ruler.disable(["backticks"])},render:function(){var e=this;this.textarea=Ext.get("ta"),this.buildUI(),this.registerAce(),this.registerMarked();var t=Ext.get("preview-button"),i=Ext.get("fullscreen-button"),s=Ext.get("preview-md"),n=Ext.get("content-md"),o=Ext.get("status-bar"),a=n.parent(),r=MODx.load({xtype:"modx-treedrop",target:n,targetEl:n,onInsert:function(e){return this.insert(e),this.focus(),!0}.bind(this.editor),iframe:!0});this.textarea.on("destroy",function(){r.destroy()}),t.addListener("click",function(){s.isVisible()?(s.setDisplayed("none"),n.setDisplayed("block"),o.setDisplayed("block"),t.child("i").removeClass("icon-toggle-on"),t.child("i").addClass("icon-toggle-off")):(s.setDisplayed("block"),n.setDisplayed("none"),o.setDisplayed("none"),t.child("i").removeClass("icon-toggle-off"),t.child("i").addClass("icon-toggle-on"))}),i.addListener("click",function(){var e=i.child("i");e.hasClass("icon-expand")?(e.removeClass("icon-expand"),e.addClass("icon-compress"),s.setDisplayed("block"),n.setDisplayed("block"),t.hide(),a.addClass("fullscreen"),this.editor.setOption("maxLines",null)):(e.addClass("icon-expand"),e.removeClass("icon-compress"),s.setDisplayed("none"),n.setDisplayed("block"),t.show(),a.removeClass("fullscreen"),this.editor.setOption("maxLines",1/0)),o.setDisplayed("block"),this.editor.resize(!0)},this),MarkdownEditor_content.content&&this.editor.setValue(MarkdownEditor_content.content),this.editor.selection.clearSelection(),s.update(this.parse(this.editor.getValue())),this.editor.getSession().on("change",function(){e.parse(e.editor.getValue())})}}),MarkdownEditor=new MarkdownEditor;
//# sourceMappingURL=data:application/json;base64,