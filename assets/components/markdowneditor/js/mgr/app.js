Ext.ns("MarkdownEditor"),MarkdownEditor=function(e){e=e||{},MarkdownEditor.superclass.constructor.call(this,e)},Ext.extend(MarkdownEditor,Ext.Component,{window:{},combo:{},config:{}}),Ext.reg("markdowneditor",MarkdownEditor),markdownEditor=new MarkdownEditor,markdownEditor.loadedElements={},markdownEditor.Editor=function(e){e=e||{},e.resource=MODx.request.id||0,markdownEditor.Editor.superclass.constructor.call(this,e),this.config=e},Ext.extend(markdownEditor.Editor,Ext.Component,{remarkable:"",fullScreen:!1,initComponent:function(){MarkdownEditor.superclass.initComponent.call(this),this.mdElementId&&Ext.onReady(this.render,this)},destroy:function(){this.editor.destroy(),this.mdContainer.remove(),this.taMarkdown.remove(),this.textarea.dom.style.display=null,this.textarea.dom.style.width=null,this.textarea.dom.style.height=null,MarkdownEditor.superclass.destroy.call(this)},render:function(){if(this.textarea=Ext.get(this.mdElementId),this.mdElementName=this.textarea.dom.name,this.textarea){this.buildUI(),this.registerAce(),this.registerMarked(),this.buildToolbox();var e=this.toolBox.child(".preview-button"),t=this.toolBox.child(".fullscreen-button"),i=this.toolBox.child(".splitscreen-button"),o=this.contentMD,r=Ext.get(Ext.DomHelper.append(o.parent(),{tag:"div","class":"preview-button-off",html:'<i class="icon icon-eye-slash icon-large"></i>',hidden:!0})),a=MODx.load({xtype:"modx-treedrop",target:o,targetEl:o,onInsert:function(e){return this.insert(e),this.focus(),!0}.bind(this.editor),iframe:!0});this.textarea.on("destroy",function(){a.destroy()});var n=parseInt(MODx.config["markdowneditor.general.split"]||0);1==n&&i.turnOn(),e.addListener("click",function(){this.showPreview(),this.hideContent(),this.statusBar.setDisplayed("none"),this.contentMD.parent().parent().addClass("preview"),r.show()},this),r.addListener("click",function(){this.hidePreview(),this.showContent(),this.statusBar.setDisplayed("block"),this.contentMD.parent().parent().removeClass("preview"),this.editor.focus(),r.hide()},this),i.addListener("click",function(){i.child("i").hasClass("icon-pause")?i.turnOn():i.turnOff()},this),t.addListener("click",function(){0==this.fullScreen?t.turnOn():t.turnOff(),this.statusBar.setDisplayed("block"),this.editor.resize(!0)},this),markdownEditor.content[this.mdElementName]&&this.editor.setValue(markdownEditor.content[this.mdElementName]),this.editor.selection.clearSelection(),this.preview.update(this.parse(this.editor.getValue())),this.preview.fixHeight(),this.editor.getSession().on("change",function(e){if("insertText"==e.data.action&&this.editor.getSession().getDocument().isNewLine(e.data.text)){var t=this.editor.getSession(),i=t.getDocument();null!=/^\s*(?:[*+-]|\d+\.)\s*$/.exec(i.getLine(e.data.range.start.row))&&i.removeLines(e.data.range.start.row,e.data.range.start.row)}this.parse(this.editor.getValue())}.bind(this))}},showContent:function(){this.contentMD.setDisplayed("block")},hideContent:function(){this.contentMD.setDisplayed("none")},showPreview:function(){this.preview.setDisplayed("block")},hidePreview:function(){this.preview.setDisplayed("none")},buildUI:function(){this.textarea.setDisplayed("none"),this.textarea.setWidth(0),this.textarea.setHeight(0),this.taMarkdown=Ext.get(Ext.DomHelper.insertBefore(this.textarea,{tag:"textarea",name:this.mdElementName+"_markdown","class":this.mdElementName+"_markdown"})),this.taMarkdown.setDisplayed("none"),this.taMarkdown.setWidth(0),this.taMarkdown.setHeight(0),this.mdContainer=Ext.get(Ext.DomHelper.insertBefore(this.textarea,{tag:"div","class":"markdown-container ace-"+(MODx.config["markdowneditor.general.theme"]||"monokai").toLowerCase()}));var e=Ext.get(Ext.DomHelper.append(this.mdContainer.dom,{tag:"div","class":"fullscreen-header ace_gutter",html:'<input type="text" />'})),t=Ext.getCmp("modx-resource-pagetitle");if(t){var i=e.child("input");i.dom.value=t.getValue(),i.on("change",function(){t.setValue(this.dom.value)}),t.on("change",function(e,t){i.dom.value=t})}var o=Ext.get(Ext.DomHelper.append(this.mdContainer.dom,{tag:"div","class":"markdown-wrapper"}));this.contentMD=Ext.get(Ext.DomHelper.append(o,{tag:"div","class":this.textarea.dom.className+" content-md "+this.mdElementName+"_markdown"})),this.preview=Ext.get(Ext.DomHelper.append(o,{tag:"div","class":"markdown-body preview-md"}));var r=this;this.preview.fixHeight=function(){var e=r.editor.getSession().getScreenLength()*r.editor.renderer.lineHeight+r.editor.renderer.scrollBar.getWidth()+30;this.setHeight(e)},1==MODx.config["markdowneditor.upload.enable_image_upload"]||1==MODx.config["markdowneditor.upload.enable_file_upload"]?(this.statusBar=Ext.get(Ext.DomHelper.append(this.mdContainer.dom,{tag:"div","class":"status-bar ace_gutter"})),this.isMobileDevice()?(this.statusBar.dom.innerHTML='<div class="upload-bar"> <input class="hidden" name="md_file_'+this.statusBar.id+'" id="'+this.statusBar.id+'-file" type="file" multiple /><input class="hidden" name="md_file_'+this.statusBar.id+'-mobile" id="'+this.statusBar.id+'-file-mobile" type="file" accept="image/*" capture="camera" />'+_("markdowneditor.status_bar_message_mobile",{id:this.statusBar.id+"-file",id_mobile:this.statusBar.id+"-file-mobile"})+"</div>",this.statusBar.child("#"+this.statusBar.id+"-file-mobile").on("change",function(e,t){this.handleFiles(t.files,1),t.value=""},this)):(this.statusBar.dom.innerHTML='<div class="upload-bar"> <input class="hidden" name="md_file_'+this.statusBar.id+'" id="'+this.statusBar.id+'-file" type="file" multiple>'+_("markdowneditor.status_bar_message",{id:this.statusBar.id+"-file"})+"</div>",this.statusBar.child("#"+this.statusBar.id+"-file").on("change",function(e,t){this.handleFiles(t.files),t.value=""},this))):this.statusBar=Ext.get(Ext.DomHelper.append(this.mdContainer.dom,{tag:"div","class":"status-bar",html:_("markdowneditor.status_bar_disabled")})),Ext.DomHelper.append(this.mdContainer.dom,{tag:"span",style:"clear: both"})},buildToolbox:function(){this.toolBox=Ext.get(Ext.DomHelper.append(this.statusBar,{tag:"div","class":"toolbox",cn:[{tag:"div","class":"preview-button",html:'<i class="icon icon-eye icon-large"></i>'},{tag:"div","class":"splitscreen-button",html:'<i class="icon icon-pause icon-large"></i>'},{tag:"div","class":"fullscreen-button",html:'<i class="icon icon-expand icon-large"></i>'}]}));var e=this;this.toolBox.child(".splitscreen-button").turnOn=function(){this.child("i").removeClass("icon-pause"),this.child("i").addClass("icon-stop"),e.contentMD.parent().parent().addClass("split")},this.toolBox.child(".splitscreen-button").turnOff=function(){this.child("i").addClass("icon-pause"),this.child("i").removeClass("icon-stop"),e.contentMD.parent().parent().removeClass("split")},this.toolBox.child(".fullscreen-button").turnOn=function(){this.child("i").removeClass("icon-expand"),this.child("i").addClass("icon-compress");var t=Ext.get("modx-action-buttons");t&&t.addClass("markdowneditor-fullscreen"),e.fullScreen=!0,1==parseInt(MODx.config["markdowneditor.general.split_fullscreen"]||1)?e.toolBox.child(".splitscreen-button").turnOn():e.toolBox.child(".splitscreen-button").turnOff(),e.showPreview(),e.showContent(),e.editor.focus(),e.contentMD.parent().parent().addClass("fullscreen"),e.editor.setOption("maxLines",null)},this.toolBox.child(".fullscreen-button").turnOff=function(){this.child("i").addClass("icon-expand"),this.child("i").removeClass("icon-compress");var t=Ext.get("modx-action-buttons");t&&t.removeClass("markdowneditor-fullscreen"),e.fullScreen=!1,1==parseInt(MODx.config["markdowneditor.general.split"]||0)?e.toolBox.child(".splitscreen-button").turnOn():e.toolBox.child(".splitscreen-button").turnOff(),e.hidePreview(),e.showContent(),e.editor.focus(),e.contentMD.parent().parent().removeClass("fullscreen"),e.editor.setOption("maxLines",1/0),e.preview.fixHeight()}},registerAce:function(){this.editor=ace.edit(Ext.DomQuery.selectNode("div."+this.mdElementName+"_markdown")),this.editor.setOptions({maxLines:1/0,minLines:25,enableBasicAutocompletion:!0,printMargin:!1,showGutter:!0,useSoftTabs:!0,showFoldWidgets:!1,showLineNumbers:!1,fontSize:parseInt(MODx.config["markdowneditor.general.font_size"])||12,fontFamily:MODx.config["markdowneditor.general.font_family"]||""}),this.editor.getSession().setUseWrapMode(!0),this.editor.getSession().setWrapLimitRange(),this.editor.renderer.setScrollMargin(10,10),this.editor.getSession().setValue(this.textarea.getValue()),this.editor.getSession().setMode("ace/mode/markdowneditor"),this.editor.setTheme("ace/theme/"+(MODx.config["markdowneditor.general.theme"]||"monokai")),this.editor.commands.addCommand({name:"Indent list",bindKey:{win:"Tab",mac:"Tab"},exec:function(e){var t=e.session.getLine(e.getCursorPosition().row),i=/^(\s*)(?:([-+*])|(\d+)\.)(\s+)/.exec(t);i?e.session.indentRows(e.getCursorPosition().row,e.getCursorPosition().row,"	"):e.indent()}}),this.editor.commands.addCommand({name:"Exit fullscreen",bindKey:{win:"Esc",mac:"Esc"},exec:function(){this.fullScreen&&this.toolBox.child(".fullscreen-button").turnOff()}.bind(this)});var e=ace.require("ace/ext/language_tools"),t={getCompletions:function(e,t,i,o,r){return 0===o.length?(r(null,[]),void 0):(MODx.Ajax.request({url:markdownEditor.config.connectorUrl,params:{action:"mgr/resource/getlist",prefix:o},listeners:{success:{fn:function(e){r(null,e.results)},scope:this}}}),void 0)}};e.addCompleter(t),this.editor.container.addEventListener("dragenter",this.catchAndDoNothing,!1),this.editor.container.addEventListener("dragover",this.catchAndDoNothing,!1),this.editor.container.addEventListener("drop",this.drop.bind(this),!1)},registerMarked:function(){this.remarkable=new Remarkable({html:!0,highlight:function(e,t){var i="";if(t&&hljs.getLanguage(t))try{return i=hljs.highlight(t,e).value,i=i.replace(/\[\[/g,"&#91;&#91;"),i=i.replace(/]]/g,"&#93;&#93;")}catch(o){}try{return i=hljs.highlightAuto(e).value,i=i.replace(/\[\[/g,"&#91;&#91;"),i=i.replace(/]]/g,"&#93;&#93;")}catch(o){}return""}}),this.remarkable.inline.ruler.disable(["backticks"])},parse:function(e){var t=this.remarkable.render(e);if(t=t.replace(/%5B/g,"["),t=t.replace(/%5D/g,"]"),1==MODx.config["markdowneditor.lp.parse_modx_tags"]){this.parseRequest&&clearTimeout(this.parseRequest);var i=parseInt(MODx.config["markdowneditor.lp.parse_modx_tags_timeout"]||300);this.parseRequest=setTimeout(function(){MODx.Ajax.request({url:markdownEditor.config.connectorUrl,params:{action:"mgr/editor/processcontent",content:t,resource:MODx.request.id},isUpload:!0,listeners:{success:{fn:function(e){this.preview.update(e.data),this.editor.getCursorPosition().row+2>=this.editor.getSession().getDocument().getLength()&&(this.preview.dom.scrollTop=this.preview.dom.scrollHeight),this.preview.fixHeight()},scope:this}}})}.bind(this),i)}else this.preview.update(t),this.editor.getCursorPosition().row+2>=this.editor.getSession().getDocument().getLength()&&(this.preview.dom.scrollTop=this.preview.dom.scrollHeight),this.preview.fixHeight();return this.taMarkdown.dom.value=this.editor.getValue(),this.textarea.dom.value=t,t},catchAndDoNothing:function(e){e.stopPropagation(),e.preventDefault()},drop:function(e){e.stopPropagation(),e.preventDefault(),(1==MODx.config["markdowneditor.upload.enable_image_upload"]||1==MODx.config["markdowneditor.upload.enable_file_upload"])&&this.handleFiles(e.dataTransfer.files)},handleFiles:function(e,t){t=t||0,Ext.each(e,function(e){var i=/^image\//.test(e.type);if(i){if(0==MODx.config["markdowneditor.upload.enable_image_upload"])return!0;if(!this.checkType(MODx.config["markdowneditor.upload.image_types"],e))return this.failMessage(e,"image",_("markdowneditor.err.upload.unsupported_image")),!0;if(!this.checkSize(e.size))return this.failMessage(e,"image",_("markdowneditor.err.upload.too_big")),!0;1==MODx.config["markdowneditor.cropper.enable_cropper"]?MODx.load({xtype:"markdowneditor-window-cropper",file:e,md:this,mobile:t}).show():(this.uploadFile(e,"image",t),this.editor.focus())}else{if(0==MODx.config["markdowneditor.upload.enable_file_upload"])return!0;if(!this.checkType(MODx.config["markdowneditor.upload.file_types"],e))return this.failMessage(e,"file",_("markdowneditor.err.upload.unsupported_file")),!0;if(!this.checkSize(e.size))return this.failMessage(e,"file",_("markdowneditor.err.upload.too_big")),!0;this.uploadFile(e,"file"),this.editor.focus()}},this)},checkSize:function(e){var t=MODx.config["markdowneditor.upload.max_size"];return t&&""!=t||(t=MODx.config.upload_maxsize||"2097152"),t=parseInt(t),0==t?!0:t>=e},checkType:function(e,t){return e=e.split(","),-1!=e.indexOf(t.name.split(".").pop())},uploadFile:function(e,t,i){t=t||"file",i=i||0;var o=this.createUploader(),r=new FormData;r.append("file",e),r.append("action","mgr/editor/"+t+"upload"),r.append("name",e.name),r.append("resource",this.config.resource),r.append("mobile",i);var a=new XMLHttpRequest;a.open("POST",markdownEditor.config.connectorUrl),a.setRequestHeader("Powered-By","MODx"),a.setRequestHeader("modAuth",Ext.Ajax.defaultHeaders.modAuth),a.upload.onprogress=function(e){if(e.lengthComputable){var t=e.loaded/e.total*100|0;o.child(".progress").setWidth(t+"%")}}.bind(this),a.onload=function(){if(200===a.status){var e=JSON.parse(a.responseText);if(1==e.success){o.remove();var i="image"==t?"!":"",r="image"==t?"\n\n":"\n";this.editor.insert(i+"["+e.object.name+"]("+e.object.path+' "'+e.object.name+'")'+r)}else this.failUploader(o,e.message)}}.bind(this),a.send(r)},createUploader:function(e,t){var i=Ext.DomHelper.insertFirst(this.statusBar,{tag:"div",html:'<div class="progress"><i class="icon icon-spinner icon-spin"></i> <span>'+_("markdowneditor.uploading_"+e)+t+"</span></div>"});return Ext.get(i)},failUploader:function(e,t){e.child(".progress").addClass("error"),e.child(".progress").setWidth("100%"),e.child("i").addClass("remove-message"),e.child("i").replaceClass("icon-spinner","icon-remove"),e.child("i").removeClass("icon-spin"),e.child("span").dom.innerHTML+=" failed. "+t,e.child(".remove-message").on("click",function(){e.remove()})},failMessage:function(e,t,i){var o=this.createUploader(t,e.name);this.failUploader(o,i)},isMobileDevice:function(){return"undefined"!=typeof window.orientation||-1!==navigator.userAgent.indexOf("IEMobile")}}),MODx.loadRTE=function(e){new markdownEditor.Editor({mdElementId:e})},MODx.afterTVLoad=function(){var e=Ext.query("textarea.modx-richtext");Ext.each(e,function(e){return(e=Ext.get(e))?markdownEditor.loadedElements[e.id]?!0:(markdownEditor.loadedElements[e.id]=new markdownEditor.Editor({mdElementId:e.id}),void 0):!0})},MODx.unloadTVRTE=function(){var e=Ext.query(".modx-richtext");Ext.each(e,function(e){return(e=Ext.get(e))?markdownEditor.loadedElements[e.id]?(markdownEditor.loadedElements[e.id].destroy(),void 0):!0:!0})},markdownEditor.combo.CropperProfile=function(e){var t=JSON.parse(MODx.config["markdowneditor.cropper.profiles"]||"[]");e=e||{},Ext.applyIf(e,{store:new Ext.data.JsonStore({data:t,fields:["name","width","height","ratio"]}),displayField:"name",mode:"local",valueField:"name",editable:!1,value:t[0]?t[0].name:""});var i=parseInt(MODx.config["markdowneditor.cropper.show_description"]||0);i&&(e.tpl=new Ext.XTemplate('<tpl for="."><div class="x-combo-list-item"><span style="font-weight: bold">{name}</span>','<br /><tpl if="width">W:{width} </tpl><tpl if="height">H:{height} </tpl><tpl if="ratio">R:{ratio}</tpl></div></tpl>')),markdownEditor.combo.CropperProfile.superclass.constructor.call(this,e)},Ext.extend(markdownEditor.combo.CropperProfile,MODx.combo.ComboBox),Ext.reg("markdowneditor-combo-cropper-profile",markdownEditor.combo.CropperProfile),markdownEditor.window.Cropper=function(e){e=e||{},e.cropperSelector=e.cropperSelector||".image-upload-wrapper > img";var t=Ext.id();Ext.applyIf(e,{modal:!1,layout:"auto",closeAction:"hide",shadow:!0,resizable:!0,collapsible:!0,maximizable:!1,autoHeight:!1,autoScroll:!0,allowDrop:!0,width:800,mobile:0,title:_("markdowneditor.cropper.crop_image"),cls:"modx-window markdowneditor-cropper-window",items:[{layout:"column",border:!1,defaults:{layout:"form",labelAlign:"top",labelSeparator:"",anchor:"100%",border:!1},items:[{columnWidth:.1,defaults:{msgTarget:"under",anchor:"100%"},cls:"markdowneditor-toolbar",items:[{xtype:"button",text:'<i class="icon icon-arrows icon-large"></i>',tooltip:_("markdowneditor.cropper.move"),scope:this,param:"move",action:"setDragMode",handler:this.callCropperAction},{xtype:"button",text:'<i class="icon icon-crop icon-large"></i>',tooltip:_("markdowneditor.cropper.crop"),scope:this,param:"crop",action:"setDragMode",handler:this.callCropperAction},{xtype:"button",text:'<i class="icon icon-search-plus icon-large"></i>',tooltip:_("markdowneditor.cropper.zoom_in"),scope:this,param:.1,action:"zoom",handler:this.callCropperAction},{xtype:"button",text:'<i class="icon icon-search-minus icon-large"></i>',tooltip:_("markdowneditor.cropper.zoom_out"),scope:this,param:-.1,action:"zoom",handler:this.callCropperAction},{xtype:"button",text:'<i class="icon icon-rotate-left icon-large"></i>',tooltip:_("markdowneditor.cropper.rotate_left"),scope:this,param:-90,action:"rotate",handler:this.callCropperAction},{xtype:"button",text:'<i class="icon icon-rotate-right icon-large"></i>',tooltip:_("markdowneditor.cropper.rotate_right"),scope:this,param:90,action:"rotate",handler:this.callCropperAction},{xtype:"button",text:'<i class="icon icon-remove icon-large"></i>',tooltip:_("markdowneditor.cropper.clear_cropper"),scope:this,param:null,action:"clear",handler:this.callCropperAction}]},{columnWidth:.9,defaults:{msgTarget:"under",anchor:"100%"},cls:"markdowneditor-cropper",items:[{html:'<div class="image-upload-wrapper"><img src="'+URL.createObjectURL(e.file)+'"></div>'}]}]}],bbar:[{xtype:"markdowneditor-combo-cropper-profile",id:t+"-cropper-profile",listeners:{select:{fn:function(e,t){this.changeCropperProfile(t.data)},scope:this}}},"->",{text:_("cancel"),scope:this,handler:this.close},{text:_("markdowneditor.cropper.upload"),cls:"primary-button",scope:this,crop:0,handler:this.upload},{text:_("markdowneditor.cropper.crop_upload"),cls:"primary-button",scope:this,crop:1,handler:this.upload}],listeners:{show:{fn:function(){var i={};this.$cropperEl=$("#"+this.id+" "+e.cropperSelector),i.crop=function(e){this.imageData=['{"x":'+e.x,'"y":'+e.y,'"height":'+e.height,'"width":'+e.width,'"rotate":'+e.rotate+"}"].join()}.bind(this),this.$cropperEl.cropper(i);var o=Ext.getCmp(t+"-cropper-profile").store.getAt(0);this.changeCropperProfile(o.data)},scope:this}}}),markdownEditor.window.Cropper.superclass.constructor.call(this,e),this.config=e},Ext.extend(markdownEditor.window.Cropper,Ext.Window,{imageData:"",cropperProfile:{name:""},changeCropperProfile:function(profile){var ratio;if(""!=profile.ratio)ratio=profile.ratio,ratio.replace(/[^-:x()\d/*+.]/g,""),ratio=eval(ratio)||0/0;else if(profile.width&&profile.height){var width=parseInt(profile.width),height=parseInt(profile.height);ratio=width>0&&height>0?width/height:0/0}else ratio=0/0;this.cropperProfile=profile,this.callCropperAction({action:"setAspectRatio",param:ratio})},upload:function(e){var t=this.config.md.createUploader("image",this.config.file.name),i=new FormData;i.append("file",this.config.file),i.append("action","mgr/editor/imageupload"),i.append("imageData",this.imageData),i.append("name",this.config.file.name),i.append("crop",e.crop),i.append("resource",this.config.md.config.resource),i.append("mobile",this.config.mobile),i.append("profile",this.cropperProfile.name);var o=new XMLHttpRequest;o.open("POST",markdownEditor.config.connectorUrl),o.setRequestHeader("Powered-By","MODx"),o.setRequestHeader("modAuth",Ext.Ajax.defaultHeaders.modAuth),o.upload.onprogress=function(e){if(e.lengthComputable){var i=e.loaded/e.total*100|0;t.child(".progress").setWidth(i+"%")}}.bind(this),o.onload=function(){if(200===o.status){var e=JSON.parse(o.responseText);1==e.success?(t.remove(),this.config.md.editor.insert("!["+e.object.name+"]("+e.object.path+' "'+e.object.name+'")\n\n')):this.config.md.failUploader(t,e.message)}}.bind(this),o.send(i),this.close()},callCropperAction:function(e){this.$cropperEl.cropper(e.action,e.param)},close:function(){this.$cropperEl.cropper("destroy"),markdownEditor.window.Cropper.superclass.close.call(this),this.config.md.editor.focus()}}),Ext.reg("markdowneditor-window-cropper",markdownEditor.window.Cropper);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbWJvLmpzIiwibWFya2Rvd25lZGl0b3Iud2luZG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsR0FBQSxrQkFDQSxlQUFBLFNBQUEsR0FDQSxFQUFBLE1BQ0EsZUFBQSxXQUFBLFlBQUEsS0FBQSxLQUFBLElBRUEsSUFBQSxPQUFBLGVBQUEsSUFBQSxXQUNBLFVBQUEsU0FBQSxZQUVBLElBQUEsSUFBQSxpQkFBQSxnQkFDQSxlQUFBLEdBQUEsZ0JBRUEsZUFBQSxrQkFFQSxlQUFBLE9BQUEsU0FBQSxHQUNBLEVBQUEsTUFDQSxFQUFBLFNBQUEsS0FBQSxRQUFBLElBQUEsRUFDQSxlQUFBLE9BQUEsV0FBQSxZQUFBLEtBQUEsS0FBQSxHQUNBLEtBQUEsT0FBQSxHQUVBLElBQUEsT0FBQSxlQUFBLE9BQUEsSUFBQSxXQUNBLFdBQUEsR0FDQSxZQUFBLEVBQ0EsY0FBQSxXQUNBLGVBQUEsV0FBQSxjQUFBLEtBQUEsTUFFQSxLQUFBLGFBQ0EsSUFBQSxRQUFBLEtBQUEsT0FBQSxPQUlBLFFBQUEsV0FDQSxLQUFBLE9BQUEsVUFFQSxLQUFBLFlBQUEsU0FDQSxLQUFBLFdBQUEsU0FFQSxLQUFBLFNBQUEsSUFBQSxNQUFBLFFBQUEsS0FDQSxLQUFBLFNBQUEsSUFBQSxNQUFBLE1BQUEsS0FDQSxLQUFBLFNBQUEsSUFBQSxNQUFBLE9BQUEsS0FFQSxlQUFBLFdBQUEsUUFBQSxLQUFBLE9BR0EsT0FBQSxXQUlBLEdBSEEsS0FBQSxTQUFBLElBQUEsSUFBQSxLQUFBLGFBQ0EsS0FBQSxjQUFBLEtBQUEsU0FBQSxJQUFBLEtBRUEsS0FBQSxTQUFBLENBRUEsS0FBQSxVQUNBLEtBQUEsY0FDQSxLQUFBLGlCQUNBLEtBQUEsY0FFQSxJQUFBLEdBQUEsS0FBQSxRQUFBLE1BQUEsbUJBQ0EsRUFBQSxLQUFBLFFBQUEsTUFBQSxzQkFDQSxFQUFBLEtBQUEsUUFBQSxNQUFBLHVCQUVBLEVBQUEsS0FBQSxVQUVBLEVBQUEsSUFBQSxJQUFBLElBQUEsVUFBQSxPQUFBLEVBQUEsVUFDQSxJQUFBLE1BQ0EsUUFBQSxxQkFDQSxLQUFBLGlEQUNBLFFBQUEsS0FHQSxFQUFBLEtBQUEsTUFDQSxNQUFBLGdCQUNBLE9BQUEsRUFDQSxTQUFBLEVBQ0EsU0FBQSxTQUFBLEdBR0EsTUFGQSxNQUFBLE9BQUEsR0FDQSxLQUFBLFNBQ0EsR0FDQSxLQUFBLEtBQUEsUUFDQSxRQUFBLEdBRUEsTUFBQSxTQUFBLEdBQUEsVUFBQSxXQUFBLEVBQUEsV0FFQSxJQUFBLEdBQUEsU0FBQSxLQUFBLE9BQUEsaUNBQUEsRUFDQSxJQUFBLEdBQ0EsRUFBQSxTQUVBLEVBQUEsWUFBQSxRQUFBLFdBQ0EsS0FBQSxjQUNBLEtBQUEsY0FDQSxLQUFBLFVBQUEsYUFBQSxRQUVBLEtBQUEsVUFBQSxTQUFBLFNBQUEsU0FBQSxXQUVBLEVBQUEsUUFDQSxNQUVBLEVBQUEsWUFBQSxRQUFBLFdBQ0EsS0FBQSxjQUNBLEtBQUEsY0FDQSxLQUFBLFVBQUEsYUFBQSxTQUVBLEtBQUEsVUFBQSxTQUFBLFNBQUEsWUFBQSxXQUVBLEtBQUEsT0FBQSxRQUVBLEVBQUEsUUFDQSxNQUVBLEVBQUEsWUFBQSxRQUFBLFdBQ0EsRUFBQSxNQUFBLEtBQUEsU0FBQSxjQUNBLEVBQUEsU0FFQSxFQUFBLFdBRUEsTUFFQSxFQUFBLFlBQUEsUUFBQSxXQUNBLEdBQUEsS0FBQSxXQUNBLEVBQUEsU0FFQSxFQUFBLFVBR0EsS0FBQSxVQUFBLGFBQUEsU0FDQSxLQUFBLE9BQUEsUUFBQSxJQUVBLE1BRUEsZUFBQSxRQUFBLEtBQUEsZ0JBQ0EsS0FBQSxPQUFBLFNBQUEsZUFBQSxRQUFBLEtBQUEsZ0JBRUEsS0FBQSxPQUFBLFVBQUEsaUJBRUEsS0FBQSxRQUFBLE9BQUEsS0FBQSxNQUFBLEtBQUEsT0FBQSxhQUVBLEtBQUEsUUFBQSxZQUVBLEtBQUEsT0FBQSxhQUFBLEdBQUEsU0FBQSxTQUFBLEdBQ0EsR0FBQSxjQUFBLEVBQUEsS0FBQSxRQUFBLEtBQUEsT0FBQSxhQUFBLGNBQUEsVUFBQSxFQUFBLEtBQUEsTUFBQSxDQUNBLEdBQUEsR0FBQSxLQUFBLE9BQUEsYUFDQSxFQUFBLEVBQUEsYUFFQSxPQUFBLDBCQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxNQUFBLE1BQUEsT0FDQSxFQUFBLFlBQUEsRUFBQSxLQUFBLE1BQUEsTUFBQSxJQUFBLEVBQUEsS0FBQSxNQUFBLE1BQUEsS0FJQSxLQUFBLE1BQUEsS0FBQSxPQUFBLGFBQ0EsS0FBQSxTQUdBLFlBQUEsV0FDQSxLQUFBLFVBQUEsYUFBQSxVQUdBLFlBQUEsV0FDQSxLQUFBLFVBQUEsYUFBQSxTQUdBLFlBQUEsV0FDQSxLQUFBLFFBQUEsYUFBQSxVQUdBLFlBQUEsV0FDQSxLQUFBLFFBQUEsYUFBQSxTQUdBLFFBQUEsV0FDQSxLQUFBLFNBQUEsYUFBQSxRQUNBLEtBQUEsU0FBQSxTQUFBLEdBQ0EsS0FBQSxTQUFBLFVBQUEsR0FFQSxLQUFBLFdBQUEsSUFBQSxJQUFBLElBQUEsVUFBQSxhQUFBLEtBQUEsVUFDQSxJQUFBLFdBQ0EsS0FBQSxLQUFBLGNBQUEsWUFDQSxRQUFBLEtBQUEsY0FBQSxlQUdBLEtBQUEsV0FBQSxhQUFBLFFBQ0EsS0FBQSxXQUFBLFNBQUEsR0FDQSxLQUFBLFdBQUEsVUFBQSxHQUVBLEtBQUEsWUFBQSxJQUFBLElBQUEsSUFBQSxVQUFBLGFBQUEsS0FBQSxVQUNBLElBQUEsTUFDQSxRQUFBLDJCQUFBLEtBQUEsT0FBQSxpQ0FBQSxXQUFBLGdCQUdBLElBQUEsR0FBQSxJQUFBLElBQUEsSUFBQSxVQUFBLE9BQUEsS0FBQSxZQUFBLEtBQ0EsSUFBQSxNQUNBLFFBQUEsK0JBQ0EsS0FBQSwyQkFHQSxFQUFBLElBQUEsT0FBQSwwQkFDQSxJQUFBLEVBQUEsQ0FDQSxHQUFBLEdBQUEsRUFBQSxNQUFBLFFBQ0EsR0FBQSxJQUFBLE1BQUEsRUFBQSxXQUVBLEVBQUEsR0FBQSxTQUFBLFdBQ0EsRUFBQSxTQUFBLEtBQUEsSUFBQSxTQUdBLEVBQUEsR0FBQSxTQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsSUFBQSxNQUFBLElBSUEsR0FBQSxHQUFBLElBQUEsSUFBQSxJQUFBLFVBQUEsT0FBQSxLQUFBLFlBQUEsS0FDQSxJQUFBLE1BQ0EsUUFBQSxxQkFHQSxNQUFBLFVBQUEsSUFBQSxJQUFBLElBQUEsVUFBQSxPQUFBLEdBQ0EsSUFBQSxNQUNBLFFBQUEsS0FBQSxTQUFBLElBQUEsVUFBQSxlQUFBLEtBQUEsY0FBQSxlQUdBLEtBQUEsUUFBQSxJQUFBLElBQUEsSUFBQSxVQUFBLE9BQUEsR0FDQSxJQUFBLE1BQ0EsUUFBQSw2QkFHQSxJQUFBLEdBQUEsSUFDQSxNQUFBLFFBQUEsVUFBQSxXQUNBLEdBQUEsR0FBQSxFQUFBLE9BQUEsYUFBQSxrQkFBQSxFQUFBLE9BQUEsU0FBQSxXQUFBLEVBQUEsT0FBQSxTQUFBLFVBQUEsV0FBQSxFQUVBLE1BQUEsVUFBQSxJQUdBLEdBQUEsS0FBQSxPQUFBLDhDQUFBLEdBQUEsS0FBQSxPQUFBLDZDQUNBLEtBQUEsVUFBQSxJQUFBLElBQUEsSUFBQSxVQUFBLE9BQUEsS0FBQSxZQUFBLEtBQ0EsSUFBQSxNQUNBLFFBQUEsMkJBR0EsS0FBQSxrQkFDQSxLQUFBLFVBQUEsSUFBQSxVQUFBLGdFQUFBLEtBQUEsVUFBQSxHQUFBLFNBQUEsS0FBQSxVQUFBLEdBQUEscUVBQUEsS0FBQSxVQUFBLEdBQUEsZ0JBQUEsS0FBQSxVQUFBLEdBQUEsaUVBQUEsRUFBQSw0Q0FBQSxHQUFBLEtBQUEsVUFBQSxHQUFBLFFBQUEsVUFBQSxLQUFBLFVBQUEsR0FBQSxpQkFBQSxTQUVBLEtBQUEsVUFBQSxNQUFBLElBQUEsS0FBQSxVQUFBLEdBQUEsZ0JBQUEsR0FBQSxTQUFBLFNBQUEsRUFBQSxHQUNBLEtBQUEsWUFBQSxFQUFBLE1BQUEsR0FDQSxFQUFBLE1BQUEsSUFDQSxRQUVBLEtBQUEsVUFBQSxJQUFBLFVBQUEsZ0VBQUEsS0FBQSxVQUFBLEdBQUEsU0FBQSxLQUFBLFVBQUEsR0FBQSwrQkFBQSxFQUFBLHFDQUFBLEdBQUEsS0FBQSxVQUFBLEdBQUEsVUFBQSxTQUVBLEtBQUEsVUFBQSxNQUFBLElBQUEsS0FBQSxVQUFBLEdBQUEsU0FBQSxHQUFBLFNBQUEsU0FBQSxFQUFBLEdBQ0EsS0FBQSxZQUFBLEVBQUEsT0FDQSxFQUFBLE1BQUEsSUFDQSxRQUlBLEtBQUEsVUFBQSxJQUFBLElBQUEsSUFBQSxVQUFBLE9BQUEsS0FBQSxZQUFBLEtBQ0EsSUFBQSxNQUNBLFFBQUEsYUFDQSxLQUFBLEVBQUEseUNBSUEsSUFBQSxVQUFBLE9BQUEsS0FBQSxZQUFBLEtBQ0EsSUFBQSxPQUNBLE1BQUEsaUJBSUEsYUFBQSxXQUNBLEtBQUEsUUFBQSxJQUFBLElBQUEsSUFBQSxVQUFBLE9BQUEsS0FBQSxXQUNBLElBQUEsTUFDQSxRQUFBLFVBQ0EsS0FDQSxJQUFBLE1BQ0EsUUFBQSxpQkFDQSxLQUFBLDZDQUVBLElBQUEsTUFDQSxRQUFBLHFCQUNBLEtBQUEsK0NBRUEsSUFBQSxNQUNBLFFBQUEsb0JBQ0EsS0FBQSxrREFJQSxJQUFBLEdBQUEsSUFFQSxNQUFBLFFBQUEsTUFBQSx1QkFBQSxPQUFBLFdBQ0EsS0FBQSxNQUFBLEtBQUEsWUFBQSxjQUNBLEtBQUEsTUFBQSxLQUFBLFNBQUEsYUFFQSxFQUFBLFVBQUEsU0FBQSxTQUFBLFNBQUEsVUFHQSxLQUFBLFFBQUEsTUFBQSx1QkFBQSxRQUFBLFdBQ0EsS0FBQSxNQUFBLEtBQUEsU0FBQSxjQUNBLEtBQUEsTUFBQSxLQUFBLFlBQUEsYUFFQSxFQUFBLFVBQUEsU0FBQSxTQUFBLFlBQUEsVUFHQSxLQUFBLFFBQUEsTUFBQSxzQkFBQSxPQUFBLFdBQ0EsS0FBQSxNQUFBLEtBQUEsWUFBQSxlQUNBLEtBQUEsTUFBQSxLQUFBLFNBQUEsZ0JBRUEsSUFBQSxHQUFBLElBQUEsSUFBQSxzQkFDQSxJQUNBLEVBQUEsU0FBQSw2QkFHQSxFQUFBLFlBQUEsRUFFQSxHQUFBLFNBQUEsS0FBQSxPQUFBLDRDQUFBLEdBQ0EsRUFBQSxRQUFBLE1BQUEsdUJBQUEsU0FFQSxFQUFBLFFBQUEsTUFBQSx1QkFBQSxVQUdBLEVBQUEsY0FDQSxFQUFBLGNBRUEsRUFBQSxPQUFBLFFBRUEsRUFBQSxVQUFBLFNBQUEsU0FBQSxTQUFBLGNBRUEsRUFBQSxPQUFBLFVBQUEsV0FBQSxPQUdBLEtBQUEsUUFBQSxNQUFBLHNCQUFBLFFBQUEsV0FDQSxLQUFBLE1BQUEsS0FBQSxTQUFBLGVBQ0EsS0FBQSxNQUFBLEtBQUEsWUFBQSxnQkFFQSxJQUFBLEdBQUEsSUFBQSxJQUFBLHNCQUNBLElBQ0EsRUFBQSxZQUFBLDZCQUdBLEVBQUEsWUFBQSxFQUVBLEdBQUEsU0FBQSxLQUFBLE9BQUEsaUNBQUEsR0FDQSxFQUFBLFFBQUEsTUFBQSx1QkFBQSxTQUVBLEVBQUEsUUFBQSxNQUFBLHVCQUFBLFVBR0EsRUFBQSxjQUNBLEVBQUEsY0FFQSxFQUFBLE9BQUEsUUFFQSxFQUFBLFVBQUEsU0FBQSxTQUFBLFlBQUEsY0FFQSxFQUFBLE9BQUEsVUFBQSxXQUFBLEtBRUEsRUFBQSxRQUFBLGNBSUEsWUFBQSxXQUNBLEtBQUEsT0FBQSxJQUFBLEtBQUEsSUFBQSxTQUFBLFdBQUEsT0FBQSxLQUFBLGNBQUEsY0FDQSxLQUFBLE9BQUEsWUFDQSxTQUFBLElBQ0EsU0FBQSxHQUNBLDJCQUFBLEVBQ0EsYUFBQSxFQUNBLFlBQUEsRUFDQSxhQUFBLEVBQ0EsaUJBQUEsRUFDQSxpQkFBQSxFQUNBLFNBQUEsU0FBQSxLQUFBLE9BQUEsc0NBQUEsR0FDQSxXQUFBLEtBQUEsT0FBQSx1Q0FBQSxLQUVBLEtBQUEsT0FBQSxhQUFBLGdCQUFBLEdBQ0EsS0FBQSxPQUFBLGFBQUEsb0JBQ0EsS0FBQSxPQUFBLFNBQUEsZ0JBQUEsR0FBQSxJQUNBLEtBQUEsT0FBQSxhQUFBLFNBQUEsS0FBQSxTQUFBLFlBQ0EsS0FBQSxPQUFBLGFBQUEsUUFBQSwyQkFDQSxLQUFBLE9BQUEsU0FBQSxjQUFBLEtBQUEsT0FBQSxpQ0FBQSxZQUVBLEtBQUEsT0FBQSxTQUFBLFlBQ0EsS0FBQSxjQUNBLFNBQUEsSUFBQSxNQUFBLElBQUEsT0FDQSxLQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxRQUFBLFFBQUEsRUFBQSxvQkFBQSxLQUNBLEVBQUEsaUNBQUEsS0FBQSxFQUNBLEdBQ0EsRUFBQSxRQUFBLFdBQUEsRUFBQSxvQkFBQSxJQUFBLEVBQUEsb0JBQUEsSUFBQSxLQUVBLEVBQUEsWUFLQSxLQUFBLE9BQUEsU0FBQSxZQUNBLEtBQUEsa0JBQ0EsU0FBQSxJQUFBLE1BQUEsSUFBQSxPQUNBLEtBQUEsV0FDQSxLQUFBLFlBQ0EsS0FBQSxRQUFBLE1BQUEsc0JBQUEsV0FFQSxLQUFBLE9BR0EsSUFBQSxHQUFBLElBQUEsUUFBQSwwQkFDQSxHQUNBLGVBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsTUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsU0FFQSxLQUFBLEtBQUEsU0FDQSxJQUFBLGVBQUEsT0FBQSxhQUNBLFFBQ0EsT0FBQSx1QkFDQSxPQUFBLEdBRUEsV0FDQSxTQUNBLEdBQUEsU0FBQSxHQUNBLEVBQUEsS0FBQSxFQUFBLFVBRUEsTUFBQSxTQVhBLFNBa0JBLEdBQUEsYUFBQSxHQUVBLEtBQUEsT0FBQSxVQUFBLGlCQUFBLFlBQUEsS0FBQSxtQkFBQSxHQUNBLEtBQUEsT0FBQSxVQUFBLGlCQUFBLFdBQUEsS0FBQSxtQkFBQSxHQUNBLEtBQUEsT0FBQSxVQUFBLGlCQUFBLE9BQUEsS0FBQSxLQUFBLEtBQUEsT0FBQSxJQUdBLGVBQUEsV0FDQSxLQUFBLFdBQUEsR0FBQSxhQUNBLE1BQUEsRUFDQSxVQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxFQUNBLElBQUEsR0FBQSxLQUFBLFlBQUEsR0FDQSxJQU1BLE1BTEEsR0FBQSxLQUFBLFVBQUEsRUFBQSxHQUFBLE1BRUEsRUFBQSxFQUFBLFFBQUEsUUFBQSxjQUNBLEVBQUEsRUFBQSxRQUFBLE1BQUEsY0FHQSxNQUFBLElBR0EsSUFNQSxNQUxBLEdBQUEsS0FBQSxjQUFBLEdBQUEsTUFFQSxFQUFBLEVBQUEsUUFBQSxRQUFBLGNBQ0EsRUFBQSxFQUFBLFFBQUEsTUFBQSxjQUdBLE1BQUEsSUFFQSxNQUFBLE1BR0EsS0FBQSxXQUFBLE9BQUEsTUFBQSxTQUFBLGVBR0EsTUFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEtBQUEsV0FBQSxPQUFBLEVBS0EsSUFIQSxFQUFBLEVBQUEsUUFBQSxPQUFBLEtBQ0EsRUFBQSxFQUFBLFFBQUEsT0FBQSxLQUVBLEdBQUEsS0FBQSxPQUFBLHFDQUFBLENBQ0EsS0FBQSxjQUNBLGFBQUEsS0FBQSxhQUdBLElBQUEsR0FBQSxTQUFBLEtBQUEsT0FBQSw4Q0FBQSxJQUVBLE1BQUEsYUFBQSxXQUFBLFdBQ0EsS0FBQSxLQUFBLFNBQ0EsSUFBQSxlQUFBLE9BQUEsYUFDQSxRQUNBLE9BQUEsNEJBQ0EsUUFBQSxFQUNBLFNBQUEsS0FBQSxRQUFBLElBRUEsVUFBQSxFQUNBLFdBQ0EsU0FDQSxHQUFBLFNBQUEsR0FDQSxLQUFBLFFBQUEsT0FBQSxFQUFBLE1BRUEsS0FBQSxPQUFBLG9CQUFBLElBQUEsR0FBQSxLQUFBLE9BQUEsYUFBQSxjQUFBLGNBQ0EsS0FBQSxRQUFBLElBQUEsVUFBQSxLQUFBLFFBQUEsSUFBQSxjQUdBLEtBQUEsUUFBQSxhQUVBLE1BQUEsVUFJQSxLQUFBLE1BQUEsT0FFQSxNQUFBLFFBQUEsT0FBQSxHQUVBLEtBQUEsT0FBQSxvQkFBQSxJQUFBLEdBQUEsS0FBQSxPQUFBLGFBQUEsY0FBQSxjQUNBLEtBQUEsUUFBQSxJQUFBLFVBQUEsS0FBQSxRQUFBLElBQUEsY0FHQSxLQUFBLFFBQUEsV0FNQSxPQUhBLE1BQUEsV0FBQSxJQUFBLE1BQUEsS0FBQSxPQUFBLFdBQ0EsS0FBQSxTQUFBLElBQUEsTUFBQSxFQUVBLEdBR0Esa0JBQUEsU0FBQSxHQUNBLEVBQUEsa0JBQ0EsRUFBQSxrQkFHQSxLQUFBLFNBQUEsR0FDQSxFQUFBLGtCQUNBLEVBQUEsa0JBRUEsR0FBQSxLQUFBLE9BQUEsOENBQUEsR0FBQSxLQUFBLE9BQUEsOENBQ0EsS0FBQSxZQUFBLEVBQUEsYUFBQSxRQUlBLFlBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxHQUFBLEVBRUEsSUFBQSxLQUFBLEVBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxXQUFBLEtBQUEsRUFBQSxLQUVBLElBQUEsRUFBQSxDQUNBLEdBQUEsR0FBQSxLQUFBLE9BQUEsNkNBQUEsT0FBQSxDQUVBLEtBQUEsS0FBQSxVQUFBLEtBQUEsT0FBQSxxQ0FBQSxHQUdBLE1BRkEsTUFBQSxZQUFBLEVBQUEsUUFBQSxFQUFBLGlEQUVBLENBSUEsS0FBQSxLQUFBLFVBQUEsRUFBQSxNQUdBLE1BRkEsTUFBQSxZQUFBLEVBQUEsUUFBQSxFQUFBLHVDQUVBLENBR0EsSUFBQSxLQUFBLE9BQUEseUNBQ0EsS0FBQSxNQUNBLE1BQUEsZ0NBQ0EsS0FBQSxFQUNBLEdBQUEsS0FDQSxPQUFBLElBQ0EsUUFFQSxLQUFBLFdBQUEsRUFBQSxRQUFBLEdBQ0EsS0FBQSxPQUFBLGFBRUEsQ0FDQSxHQUFBLEdBQUEsS0FBQSxPQUFBLDRDQUFBLE9BQUEsQ0FFQSxLQUFBLEtBQUEsVUFBQSxLQUFBLE9BQUEsb0NBQUEsR0FHQSxNQUZBLE1BQUEsWUFBQSxFQUFBLE9BQUEsRUFBQSxnREFFQSxDQUdBLEtBQUEsS0FBQSxVQUFBLEVBQUEsTUFHQSxNQUZBLE1BQUEsWUFBQSxFQUFBLE9BQUEsRUFBQSx1Q0FFQSxDQUdBLE1BQUEsV0FBQSxFQUFBLFFBQ0EsS0FBQSxPQUFBLFVBR0EsT0FHQSxVQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsS0FBQSxPQUFBLGlDQUtBLE9BSkEsSUFBQSxJQUFBLElBQUEsRUFBQSxLQUFBLE9BQUEsZ0JBQUEsV0FFQSxFQUFBLFNBQUEsR0FFQSxHQUFBLEdBQUEsRUFFQSxHQUFBLEdBR0EsVUFBQSxTQUFBLEVBQUEsR0FHQSxNQUZBLEdBQUEsRUFBQSxNQUFBLEtBRUEsSUFBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLE1BQUEsS0FBQSxRQUdBLFdBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEdBQUEsT0FDQSxFQUFBLEdBQUEsQ0FFQSxJQUFBLEdBQUEsS0FBQSxpQkFFQSxFQUFBLEdBQUEsU0FDQSxHQUFBLE9BQUEsT0FBQSxHQUNBLEVBQUEsT0FBQSxTQUFBLGNBQUEsRUFBQSxVQUNBLEVBQUEsT0FBQSxPQUFBLEVBQUEsTUFDQSxFQUFBLE9BQUEsV0FBQSxLQUFBLE9BQUEsVUFDQSxFQUFBLE9BQUEsU0FBQSxFQUVBLElBQUEsR0FBQSxHQUFBLGVBQ0EsR0FBQSxLQUFBLE9BQUEsZUFBQSxPQUFBLGNBQ0EsRUFBQSxpQkFBQSxhQUFBLFFBQ0EsRUFBQSxpQkFBQSxVQUFBLElBQUEsS0FBQSxlQUFBLFNBRUEsRUFBQSxPQUFBLFdBQUEsU0FBQSxHQUNBLEdBQUEsRUFBQSxpQkFBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLElBQUEsQ0FDQSxHQUFBLE1BQUEsYUFBQSxTQUFBLEVBQUEsT0FFQSxLQUFBLE1BRUEsRUFBQSxPQUFBLFdBQ0EsR0FBQSxNQUFBLEVBQUEsT0FBQSxDQUNBLEdBQUEsR0FBQSxLQUFBLE1BQUEsRUFBQSxhQUNBLElBQUEsR0FBQSxFQUFBLFFBQUEsQ0FDQSxFQUFBLFFBQ0EsSUFBQSxHQUFBLFNBQUEsRUFBQSxJQUFBLEdBQ0EsRUFBQSxTQUFBLEVBQUEsT0FBQSxJQUNBLE1BQUEsT0FBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsS0FBQSxLQUFBLEVBQUEsT0FBQSxLQUFBLEtBQUEsRUFBQSxPQUFBLEtBQUEsS0FBQSxPQUVBLE1BQUEsYUFBQSxFQUFBLEVBQUEsV0FHQSxLQUFBLE1BRUEsRUFBQSxLQUFBLElBR0EsZUFBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsSUFBQSxVQUFBLFlBQUEsS0FBQSxXQUNBLElBQUEsTUFDQSxLQUFBLDJFQUFBLEVBQUEsNEJBQUEsR0FBQSxFQUFBLGlCQUdBLE9BQUEsS0FBQSxJQUFBLElBR0EsYUFBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLE1BQUEsYUFBQSxTQUFBLFNBQ0EsRUFBQSxNQUFBLGFBQUEsU0FBQSxRQUVBLEVBQUEsTUFBQSxLQUFBLFNBQUEsa0JBQ0EsRUFBQSxNQUFBLEtBQUEsYUFBQSxlQUFBLGVBQ0EsRUFBQSxNQUFBLEtBQUEsWUFBQSxhQUVBLEVBQUEsTUFBQSxRQUFBLElBQUEsV0FBQSxZQUFBLEVBQ0EsRUFBQSxNQUFBLG1CQUFBLEdBQUEsUUFBQSxXQUNBLEVBQUEsWUFJQSxZQUFBLFNBQUEsRUFBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLEtBQUEsZUFBQSxFQUFBLEVBQUEsS0FDQSxNQUFBLGFBQUEsRUFBQSxJQUdBLGVBQUEsV0FDQSxNQUFBLG1CQUFBLFFBQUEsYUFBQSxLQUFBLFVBQUEsVUFBQSxRQUFBLGVBSUEsS0FBQSxRQUFBLFNBQUEsR0FDQSxHQUFBLGdCQUFBLFFBQ0EsWUFBQSxLQUlBLEtBQUEsWUFBQSxXQUNBLEdBQUEsR0FBQSxJQUFBLE1BQUEseUJBRUEsS0FBQSxLQUFBLEVBQUEsU0FBQSxHQUVBLE9BREEsRUFBQSxJQUFBLElBQUEsSUFHQSxlQUFBLGVBQUEsRUFBQSxLQUFBLEdBRUEsZUFBQSxlQUFBLEVBQUEsSUFBQSxHQUFBLGdCQUFBLFFBQ0EsWUFBQSxFQUFBLEtBREEsU0FKQSxLQVlBLEtBQUEsWUFBQSxXQUNBLEdBQUEsR0FBQSxJQUFBLE1BQUEsaUJBRUEsS0FBQSxLQUFBLEVBQUEsU0FBQSxHQUVBLE9BREEsRUFBQSxJQUFBLElBQUEsSUFHQSxlQUFBLGVBQUEsRUFBQSxLQUVBLGVBQUEsZUFBQSxFQUFBLElBQUEsVUFBQSxTQUZBLEdBRkEsS0Noc0JBLGVBQUEsTUFBQSxlQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsS0FBQSxNQUFBLEtBQUEsT0FBQSxvQ0FBQSxLQUVBLEdBQUEsTUFDQSxJQUFBLFFBQUEsR0FDQSxNQUFBLEdBQUEsS0FBQSxLQUFBLFdBQ0EsS0FBQSxFQUNBLFFBQUEsT0FBQSxRQUFBLFNBQUEsV0FFQSxhQUFBLE9BQ0EsS0FBQSxRQUNBLFdBQUEsT0FDQSxVQUFBLEVBQ0EsTUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEtBQUEsSUFHQSxJQUFBLEdBQUEsU0FBQSxLQUFBLE9BQUEsNENBQUEsRUFDQSxLQUNBLEVBQUEsSUFBQSxHQUFBLEtBQUEsVUFBQSw0RkFDQSx3SEFHQSxlQUFBLE1BQUEsZUFBQSxXQUFBLFlBQUEsS0FBQSxLQUFBLElBRUEsSUFBQSxPQUFBLGVBQUEsTUFBQSxlQUFBLEtBQUEsTUFBQSxVQUNBLElBQUEsSUFBQSx1Q0FBQSxlQUFBLE1BQUEsZ0JDekJBLGVBQUEsT0FBQSxRQUFBLFNBQUEsR0FDQSxFQUFBLE1BQ0EsRUFBQSxnQkFBQSxFQUFBLGlCQUFBLDZCQUVBLElBQUEsR0FBQSxJQUFBLElBRUEsS0FBQSxRQUFBLEdBQ0EsT0FBQSxFQUNBLE9BQUEsT0FDQSxZQUFBLE9BQ0EsUUFBQSxFQUNBLFdBQUEsRUFDQSxhQUFBLEVBQ0EsYUFBQSxFQUNBLFlBQUEsRUFDQSxZQUFBLEVBQ0EsV0FBQSxFQUNBLE1BQUEsSUFDQSxPQUFBLEVBQ0EsTUFBQSxFQUFBLHFDQUNBLElBQUEsNENBQ0EsUUFDQSxPQUFBLFNBQ0EsUUFBQSxFQUNBLFVBQ0EsT0FBQSxPQUNBLFdBQUEsTUFDQSxlQUFBLEdBQ0EsT0FBQSxPQUNBLFFBQUEsR0FFQSxRQUNBLFlBQUEsR0FDQSxVQUNBLFVBQUEsUUFDQSxPQUFBLFFBRUEsSUFBQSx5QkFDQSxRQUNBLE1BQUEsU0FDQSxLQUFBLDhDQUNBLFFBQUEsRUFBQSwrQkFDQSxNQUFBLEtBQ0EsTUFBQSxPQUNBLE9BQUEsY0FDQSxRQUFBLEtBQUEsb0JBRUEsTUFBQSxTQUNBLEtBQUEsNENBQ0EsUUFBQSxFQUFBLCtCQUNBLE1BQUEsS0FDQSxNQUFBLE9BQ0EsT0FBQSxjQUNBLFFBQUEsS0FBQSxvQkFFQSxNQUFBLFNBQ0EsS0FBQSxtREFDQSxRQUFBLEVBQUEsa0NBQ0EsTUFBQSxLQUNBLE1BQUEsR0FDQSxPQUFBLE9BQ0EsUUFBQSxLQUFBLG9CQUVBLE1BQUEsU0FDQSxLQUFBLG9EQUNBLFFBQUEsRUFBQSxtQ0FDQSxNQUFBLEtBQ0EsT0FBQSxHQUNBLE9BQUEsT0FDQSxRQUFBLEtBQUEsb0JBRUEsTUFBQSxTQUNBLEtBQUEsbURBQ0EsUUFBQSxFQUFBLHNDQUNBLE1BQUEsS0FDQSxNQUFBLElBQ0EsT0FBQSxTQUNBLFFBQUEsS0FBQSxvQkFFQSxNQUFBLFNBQ0EsS0FBQSxvREFDQSxRQUFBLEVBQUEsdUNBQ0EsTUFBQSxLQUNBLE1BQUEsR0FDQSxPQUFBLFNBQ0EsUUFBQSxLQUFBLG9CQUVBLE1BQUEsU0FDQSxLQUFBLDhDQUNBLFFBQUEsRUFBQSx3Q0FDQSxNQUFBLEtBQ0EsTUFBQSxLQUNBLE9BQUEsUUFDQSxRQUFBLEtBQUEsc0JBR0EsWUFBQSxHQUNBLFVBQ0EsVUFBQSxRQUNBLE9BQUEsUUFFQSxJQUFBLHlCQUNBLFFBQ0EsS0FBQSwrQ0FBQSxJQUFBLGdCQUFBLEVBQUEsTUFBQSxpQkFJQSxPQUNBLE1BQUEsdUNBQ0EsR0FBQSxFQUFBLG1CQUNBLFdBQ0EsUUFDQSxHQUFBLFNBQUEsRUFBQSxHQUNBLEtBQUEscUJBQUEsRUFBQSxPQUVBLE1BQUEsUUFHQSxNQUNBLEtBQUEsRUFBQSxVQUNBLE1BQUEsS0FDQSxRQUFBLEtBQUEsUUFFQSxLQUFBLEVBQUEsaUNBQ0EsSUFBQSxpQkFDQSxNQUFBLEtBQ0EsS0FBQSxFQUNBLFFBQUEsS0FBQSxTQUVBLEtBQUEsRUFBQSxzQ0FDQSxJQUFBLGlCQUNBLE1BQUEsS0FDQSxLQUFBLEVBQ0EsUUFBQSxLQUFBLFNBRUEsV0FDQSxNQUNBLEdBQUEsV0FDQSxHQUFBLEtBQ0EsTUFBQSxXQUFBLEVBQUEsSUFBQSxLQUFBLEdBQUEsSUFBQSxFQUFBLGlCQUVBLEVBQUEsS0FBQSxTQUFBLEdBQ0EsS0FBQSxXQUNBLFFBQUEsRUFBQSxFQUNBLE9BQUEsRUFBQSxFQUNBLFlBQUEsRUFBQSxPQUNBLFdBQUEsRUFBQSxNQUNBLFlBQUEsRUFBQSxPQUFBLEtBQ0EsUUFDQSxLQUFBLE1BRUEsS0FBQSxXQUFBLFFBQUEsRUFFQSxJQUFBLEdBQUEsSUFBQSxPQUFBLEVBQUEsb0JBQUEsTUFBQSxNQUFBLEVBQ0EsTUFBQSxxQkFBQSxFQUFBLE9BRUEsTUFBQSxTQUlBLGVBQUEsT0FBQSxRQUFBLFdBQUEsWUFBQSxLQUFBLEtBQUEsR0FDQSxLQUFBLE9BQUEsR0FHQSxJQUFBLE9BQUEsZUFBQSxPQUFBLFFBQUEsSUFBQSxRQUNBLFVBQUEsR0FDQSxnQkFBQSxLQUFBLElBRUEscUJBQUEsU0FBQSxTQUNBLEdBQUEsTUFFQSxJQUFBLElBQUEsUUFBQSxNQUNBLE1BQUEsUUFBQSxNQUNBLE1BQUEsUUFBQSxrQkFBQSxJQUNBLE1BQUEsS0FBQSxRQUFBLFFBRUEsSUFBQSxRQUFBLE9BQUEsUUFBQSxPQUFBLENBQ0EsR0FBQSxPQUFBLFNBQUEsUUFBQSxPQUNBLE9BQUEsU0FBQSxRQUFBLE9BRUEsT0FEQSxNQUFBLEdBQUEsT0FBQSxFQUNBLE1BQUEsT0FFQSxRQUdBLE9BQUEsR0FJQSxNQUFBLGVBQUEsUUFFQSxLQUFBLG1CQUFBLE9BQUEsaUJBQUEsTUFBQSxTQUdBLE9BQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxLQUFBLE9BQUEsR0FBQSxlQUFBLFFBQUEsS0FBQSxPQUFBLEtBQUEsTUFFQSxFQUFBLEdBQUEsU0FDQSxHQUFBLE9BQUEsT0FBQSxLQUFBLE9BQUEsTUFDQSxFQUFBLE9BQUEsU0FBQSwwQkFDQSxFQUFBLE9BQUEsWUFBQSxLQUFBLFdBQ0EsRUFBQSxPQUFBLE9BQUEsS0FBQSxPQUFBLEtBQUEsTUFDQSxFQUFBLE9BQUEsT0FBQSxFQUFBLE1BQ0EsRUFBQSxPQUFBLFdBQUEsS0FBQSxPQUFBLEdBQUEsT0FBQSxVQUNBLEVBQUEsT0FBQSxTQUFBLEtBQUEsT0FBQSxRQUNBLEVBQUEsT0FBQSxVQUFBLEtBQUEsZUFBQSxLQUVBLElBQUEsR0FBQSxHQUFBLGVBQ0EsR0FBQSxLQUFBLE9BQUEsZUFBQSxPQUFBLGNBQ0EsRUFBQSxpQkFBQSxhQUFBLFFBQ0EsRUFBQSxpQkFBQSxVQUFBLElBQUEsS0FBQSxlQUFBLFNBRUEsRUFBQSxPQUFBLFdBQUEsU0FBQSxHQUNBLEdBQUEsRUFBQSxpQkFBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLElBQUEsQ0FDQSxHQUFBLE1BQUEsYUFBQSxTQUFBLEVBQUEsT0FFQSxLQUFBLE1BRUEsRUFBQSxPQUFBLFdBQ0EsR0FBQSxNQUFBLEVBQUEsT0FBQSxDQUNBLEdBQUEsR0FBQSxLQUFBLE1BQUEsRUFBQSxhQUVBLElBQUEsRUFBQSxTQUNBLEVBQUEsU0FDQSxLQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxFQUFBLE9BQUEsS0FBQSxLQUFBLEVBQUEsT0FBQSxLQUFBLEtBQUEsRUFBQSxPQUFBLEtBQUEsV0FFQSxLQUFBLE9BQUEsR0FBQSxhQUFBLEVBQUEsRUFBQSxXQUdBLEtBQUEsTUFFQSxFQUFBLEtBQUEsR0FFQSxLQUFBLFNBR0Esa0JBQUEsU0FBQSxHQUNBLEtBQUEsV0FBQSxRQUFBLEVBQUEsT0FBQSxFQUFBLFFBR0EsTUFBQSxXQUNBLEtBQUEsV0FBQSxRQUFBLFdBRUEsZUFBQSxPQUFBLFFBQUEsV0FBQSxNQUFBLEtBQUEsTUFDQSxLQUFBLE9BQUEsR0FBQSxPQUFBLFdBR0EsSUFBQSxJQUFBLGdDQUFBLGVBQUEsT0FBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJFeHQubnMoJ01hcmtkb3duRWRpdG9yJyk7XG5NYXJrZG93bkVkaXRvciA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBNYXJrZG93bkVkaXRvci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxjb25maWcpO1xufTtcbkV4dC5leHRlbmQoTWFya2Rvd25FZGl0b3IsRXh0LkNvbXBvbmVudCx7XG4gICAgd2luZG93Ont9LGNvbWJvOnt9LGNvbmZpZzoge31cbn0pO1xuRXh0LnJlZygnbWFya2Rvd25lZGl0b3InLE1hcmtkb3duRWRpdG9yKTtcbm1hcmtkb3duRWRpdG9yID0gbmV3IE1hcmtkb3duRWRpdG9yKCk7XG5cbm1hcmtkb3duRWRpdG9yLmxvYWRlZEVsZW1lbnRzID0ge307XG5cbm1hcmtkb3duRWRpdG9yLkVkaXRvciA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBjb25maWcucmVzb3VyY2UgPSBNT0R4LnJlcXVlc3QuaWQgfHwgMDtcbiAgICBtYXJrZG93bkVkaXRvci5FZGl0b3Iuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsY29uZmlnKTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbn07XG5FeHQuZXh0ZW5kKG1hcmtkb3duRWRpdG9yLkVkaXRvcixFeHQuQ29tcG9uZW50LHtcbiAgICByZW1hcmthYmxlOiAnJ1xuICAgICxmdWxsU2NyZWVuOiBmYWxzZVxuICAgICxpbml0Q29tcG9uZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgTWFya2Rvd25FZGl0b3Iuc3VwZXJjbGFzcy5pbml0Q29tcG9uZW50LmNhbGwodGhpcyk7XG5cbiAgICAgICAgaWYgKHRoaXMubWRFbGVtZW50SWQpe1xuICAgICAgICAgICAgRXh0Lm9uUmVhZHkodGhpcy5yZW5kZXIsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLGRlc3Ryb3k6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuZWRpdG9yLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLm1kQ29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLnRhTWFya2Rvd24ucmVtb3ZlKCk7XG5cbiAgICAgICAgdGhpcy50ZXh0YXJlYS5kb20uc3R5bGUuZGlzcGxheSA9IG51bGw7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuZG9tLnN0eWxlLndpZHRoID0gbnVsbDtcbiAgICAgICAgdGhpcy50ZXh0YXJlYS5kb20uc3R5bGUuaGVpZ2h0ID0gbnVsbDtcblxuICAgICAgICBNYXJrZG93bkVkaXRvci5zdXBlcmNsYXNzLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAscmVuZGVyOiBmdW5jdGlvbihjb250YWluZXIsIHBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMudGV4dGFyZWEgPSBFeHQuZ2V0KHRoaXMubWRFbGVtZW50SWQpO1xuICAgICAgICB0aGlzLm1kRWxlbWVudE5hbWUgPSB0aGlzLnRleHRhcmVhLmRvbS5uYW1lO1xuXG4gICAgICAgIGlmICghdGhpcy50ZXh0YXJlYSkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuYnVpbGRVSSgpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQWNlKCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJNYXJrZWQoKTtcbiAgICAgICAgdGhpcy5idWlsZFRvb2xib3goKTtcblxuICAgICAgICB2YXIgcHJldmlld0J1dHRvbiA9IHRoaXMudG9vbEJveC5jaGlsZCgnLnByZXZpZXctYnV0dG9uJyk7XG4gICAgICAgIHZhciBmdWxsc2NyZWVuQnV0dG9uID0gdGhpcy50b29sQm94LmNoaWxkKCcuZnVsbHNjcmVlbi1idXR0b24nKTtcbiAgICAgICAgdmFyIHNwbGl0c2NyZWVuQnV0dG9uID0gdGhpcy50b29sQm94LmNoaWxkKCcuc3BsaXRzY3JlZW4tYnV0dG9uJyk7XG5cbiAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmNvbnRlbnRNRDtcblxuICAgICAgICB2YXIgcHJldmlld0J1dHRvbk9mZiA9IEV4dC5nZXQoRXh0LkRvbUhlbHBlci5hcHBlbmQoY29udGVudC5wYXJlbnQoKSx7XG4gICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgY2xhc3M6ICdwcmV2aWV3LWJ1dHRvbi1vZmYnLFxuICAgICAgICAgICAgaHRtbDogJzxpIGNsYXNzPVwiaWNvbiBpY29uLWV5ZS1zbGFzaCBpY29uLWxhcmdlXCI+PC9pPicsXG4gICAgICAgICAgICBoaWRkZW46IHRydWVcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHZhciBkcm9wVGFyZ2V0ID0gTU9EeC5sb2FkKHtcbiAgICAgICAgICAgIHh0eXBlOiAnbW9keC10cmVlZHJvcCcsXG4gICAgICAgICAgICB0YXJnZXQ6IGNvbnRlbnQsXG4gICAgICAgICAgICB0YXJnZXRFbDogY29udGVudCxcbiAgICAgICAgICAgIG9uSW5zZXJ0OiAoZnVuY3Rpb24ocyl7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnQocyk7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSkuYmluZCh0aGlzLmVkaXRvciksXG4gICAgICAgICAgICBpZnJhbWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbigpIHtkcm9wVGFyZ2V0LmRlc3Ryb3koKTt9KTtcblxuICAgICAgICB2YXIgZGVmYXVsdFNwbGl0ID0gcGFyc2VJbnQoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLmdlbmVyYWwuc3BsaXQnXSB8fCAwKTtcbiAgICAgICAgaWYgKGRlZmF1bHRTcGxpdCA9PSAxKSB7XG4gICAgICAgICAgICBzcGxpdHNjcmVlbkJ1dHRvbi50dXJuT24oKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aWV3QnV0dG9uLmFkZExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1ByZXZpZXcoKTtcbiAgICAgICAgICAgIHRoaXMuaGlkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzQmFyLnNldERpc3BsYXllZCgnbm9uZScpO1xuXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRNRC5wYXJlbnQoKS5wYXJlbnQoKS5hZGRDbGFzcygncHJldmlldycpO1xuXG4gICAgICAgICAgICBwcmV2aWV3QnV0dG9uT2ZmLnNob3coKVxuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICBwcmV2aWV3QnV0dG9uT2ZmLmFkZExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZVByZXZpZXcoKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd0NvbnRlbnQoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzQmFyLnNldERpc3BsYXllZCgnYmxvY2snKTtcblxuICAgICAgICAgICAgdGhpcy5jb250ZW50TUQucGFyZW50KCkucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ3ByZXZpZXcnKTtcblxuICAgICAgICAgICAgdGhpcy5lZGl0b3IuZm9jdXMoKTtcblxuICAgICAgICAgICAgcHJldmlld0J1dHRvbk9mZi5oaWRlKCk7XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIHNwbGl0c2NyZWVuQnV0dG9uLmFkZExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZiAoc3BsaXRzY3JlZW5CdXR0b24uY2hpbGQoJ2knKS5oYXNDbGFzcygnaWNvbi1wYXVzZScpKSB7XG4gICAgICAgICAgICAgICAgc3BsaXRzY3JlZW5CdXR0b24udHVybk9uKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwbGl0c2NyZWVuQnV0dG9uLnR1cm5PZmYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgZnVsbHNjcmVlbkJ1dHRvbi5hZGRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYgKHRoaXMuZnVsbFNjcmVlbiA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW5CdXR0b24udHVybk9uKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW5CdXR0b24udHVybk9mZigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN0YXR1c0Jhci5zZXREaXNwbGF5ZWQoJ2Jsb2NrJyk7XG4gICAgICAgICAgICB0aGlzLmVkaXRvci5yZXNpemUodHJ1ZSk7XG5cbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgaWYgKG1hcmtkb3duRWRpdG9yLmNvbnRlbnRbdGhpcy5tZEVsZW1lbnROYW1lXSkge1xuICAgICAgICAgICAgdGhpcy5lZGl0b3Iuc2V0VmFsdWUobWFya2Rvd25FZGl0b3IuY29udGVudFt0aGlzLm1kRWxlbWVudE5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVkaXRvci5zZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oKTtcblxuICAgICAgICB0aGlzLnByZXZpZXcudXBkYXRlKHRoaXMucGFyc2UodGhpcy5lZGl0b3IuZ2V0VmFsdWUoKSkpO1xuXG4gICAgICAgIHRoaXMucHJldmlldy5maXhIZWlnaHQoKTtcblxuICAgICAgICB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGUsYixjLGQpe1xuICAgICAgICAgICAgaWYgKGUuZGF0YS5hY3Rpb24gPT0gJ2luc2VydFRleHQnICYmIHRoaXMuZWRpdG9yLmdldFNlc3Npb24oKS5nZXREb2N1bWVudCgpLmlzTmV3TGluZShlLmRhdGEudGV4dCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2Vzc2lvbiA9IHRoaXMuZWRpdG9yLmdldFNlc3Npb24oKTtcbiAgICAgICAgICAgICAgICB2YXIgZG9jdW1lbnQgPSBzZXNzaW9uLmdldERvY3VtZW50KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoL15cXHMqKD86WyorLV18XFxkK1xcLilcXHMqJC8uZXhlYyhkb2N1bWVudC5nZXRMaW5lKGUuZGF0YS5yYW5nZS5zdGFydC5yb3cpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUxpbmVzKGUuZGF0YS5yYW5nZS5zdGFydC5yb3csIGUuZGF0YS5yYW5nZS5zdGFydC5yb3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5wYXJzZSh0aGlzLmVkaXRvci5nZXRWYWx1ZSgpKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAsc2hvd0NvbnRlbnQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuY29udGVudE1ELnNldERpc3BsYXllZCgnYmxvY2snKTtcbiAgICB9XG5cbiAgICAsaGlkZUNvbnRlbnQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuY29udGVudE1ELnNldERpc3BsYXllZCgnbm9uZScpO1xuICAgIH1cblxuICAgICxzaG93UHJldmlldzogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5wcmV2aWV3LnNldERpc3BsYXllZCgnYmxvY2snKTtcbiAgICB9XG5cbiAgICAsaGlkZVByZXZpZXc6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMucHJldmlldy5zZXREaXNwbGF5ZWQoJ25vbmUnKTtcbiAgICB9XG5cbiAgICAsYnVpbGRVSTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuc2V0RGlzcGxheWVkKCdub25lJyk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuc2V0V2lkdGgoMCk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuc2V0SGVpZ2h0KDApO1xuXG4gICAgICAgIHRoaXMudGFNYXJrZG93biA9IEV4dC5nZXQoRXh0LkRvbUhlbHBlci5pbnNlcnRCZWZvcmUodGhpcy50ZXh0YXJlYSwge1xuICAgICAgICAgICAgdGFnOiAndGV4dGFyZWEnLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5tZEVsZW1lbnROYW1lICsgJ19tYXJrZG93bicsXG4gICAgICAgICAgICBjbGFzczogdGhpcy5tZEVsZW1lbnROYW1lICsgJ19tYXJrZG93bidcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRoaXMudGFNYXJrZG93bi5zZXREaXNwbGF5ZWQoJ25vbmUnKTtcbiAgICAgICAgdGhpcy50YU1hcmtkb3duLnNldFdpZHRoKDApO1xuICAgICAgICB0aGlzLnRhTWFya2Rvd24uc2V0SGVpZ2h0KDApO1xuXG4gICAgICAgIHRoaXMubWRDb250YWluZXIgPSBFeHQuZ2V0KEV4dC5Eb21IZWxwZXIuaW5zZXJ0QmVmb3JlKHRoaXMudGV4dGFyZWEsIHtcbiAgICAgICAgICAgIHRhZzogJ2RpdicsXG4gICAgICAgICAgICBjbGFzczogJ21hcmtkb3duLWNvbnRhaW5lciBhY2UtJyArIChNT0R4LmNvbmZpZ1snbWFya2Rvd25lZGl0b3IuZ2VuZXJhbC50aGVtZSddIHx8ICdtb25va2FpJykudG9Mb3dlckNhc2UoKVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdmFyIGZ1bGxTY3JlZW5IZWFkZXIgPSBFeHQuZ2V0KEV4dC5Eb21IZWxwZXIuYXBwZW5kKHRoaXMubWRDb250YWluZXIuZG9tLHtcbiAgICAgICAgICAgIHRhZzogJ2RpdicsXG4gICAgICAgICAgICBjbGFzczogJ2Z1bGxzY3JlZW4taGVhZGVyIGFjZV9ndXR0ZXInLFxuICAgICAgICAgICAgaHRtbDogJzxpbnB1dCB0eXBlPVwidGV4dFwiIC8+J1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgdmFyIHBhZ2VUaXRsZSA9IEV4dC5nZXRDbXAoJ21vZHgtcmVzb3VyY2UtcGFnZXRpdGxlJyk7XG4gICAgICAgIGlmIChwYWdlVGl0bGUpIHtcbiAgICAgICAgICAgIHZhciBoZWFkZXJJbnB1dCA9IGZ1bGxTY3JlZW5IZWFkZXIuY2hpbGQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBoZWFkZXJJbnB1dC5kb20udmFsdWUgPSBwYWdlVGl0bGUuZ2V0VmFsdWUoKTtcblxuICAgICAgICAgICAgaGVhZGVySW5wdXQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgcGFnZVRpdGxlLnNldFZhbHVlKHRoaXMuZG9tLnZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwYWdlVGl0bGUub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGZpZWxkLHZhbHVlKXtcbiAgICAgICAgICAgICAgICBoZWFkZXJJbnB1dC5kb20udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdyYXBwZXIgPSBFeHQuZ2V0KEV4dC5Eb21IZWxwZXIuYXBwZW5kKHRoaXMubWRDb250YWluZXIuZG9tLHtcbiAgICAgICAgICAgIHRhZzogJ2RpdicsXG4gICAgICAgICAgICBjbGFzczogJ21hcmtkb3duLXdyYXBwZXInXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0aGlzLmNvbnRlbnRNRCA9IEV4dC5nZXQoRXh0LkRvbUhlbHBlci5hcHBlbmQod3JhcHBlcix7XG4gICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgY2xhc3M6IHRoaXMudGV4dGFyZWEuZG9tLmNsYXNzTmFtZSArICcgY29udGVudC1tZCAnICsgdGhpcy5tZEVsZW1lbnROYW1lICsgJ19tYXJrZG93bidcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRoaXMucHJldmlldyA9IEV4dC5nZXQoRXh0LkRvbUhlbHBlci5hcHBlbmQod3JhcHBlcix7XG4gICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgY2xhc3M6ICdtYXJrZG93bi1ib2R5IHByZXZpZXctbWQnXG4gICAgICAgIH0pKTtcblxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHRoaXMucHJldmlldy5maXhIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdGhhdC5lZGl0b3IuZ2V0U2Vzc2lvbigpLmdldFNjcmVlbkxlbmd0aCgpICogdGhhdC5lZGl0b3IucmVuZGVyZXIubGluZUhlaWdodCArIHRoYXQuZWRpdG9yLnJlbmRlcmVyLnNjcm9sbEJhci5nZXRXaWR0aCgpICArIDMwO1xuXG4gICAgICAgICAgICB0aGlzLnNldEhlaWdodChoZWlnaHQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChNT0R4LmNvbmZpZ1snbWFya2Rvd25lZGl0b3IudXBsb2FkLmVuYWJsZV9pbWFnZV91cGxvYWQnXSA9PSAxIHx8IE1PRHguY29uZmlnWydtYXJrZG93bmVkaXRvci51cGxvYWQuZW5hYmxlX2ZpbGVfdXBsb2FkJ10gPT0gMSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXNCYXIgPSBFeHQuZ2V0KEV4dC5Eb21IZWxwZXIuYXBwZW5kKHRoaXMubWRDb250YWluZXIuZG9tLHtcbiAgICAgICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgICAgIGNsYXNzOiAnc3RhdHVzLWJhciBhY2VfZ3V0dGVyJ1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc01vYmlsZURldmljZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNCYXIuZG9tLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPVwidXBsb2FkLWJhclwiPiA8aW5wdXQgY2xhc3M9XCJoaWRkZW5cIiBuYW1lPVwibWRfZmlsZV8nKyB0aGlzLnN0YXR1c0Jhci5pZCArJ1wiIGlkPVwiJyArIHRoaXMuc3RhdHVzQmFyLmlkICsgJy1maWxlXCIgdHlwZT1cImZpbGVcIiBtdWx0aXBsZSAvPjxpbnB1dCBjbGFzcz1cImhpZGRlblwiIG5hbWU9XCJtZF9maWxlXycrIHRoaXMuc3RhdHVzQmFyLmlkICsnLW1vYmlsZVwiIGlkPVwiJyArIHRoaXMuc3RhdHVzQmFyLmlkICsgJy1maWxlLW1vYmlsZVwiIHR5cGU9XCJmaWxlXCIgYWNjZXB0PVwiaW1hZ2UvKlwiIGNhcHR1cmU9XCJjYW1lcmFcIiAvPicgKyBfKCdtYXJrZG93bmVkaXRvci5zdGF0dXNfYmFyX21lc3NhZ2VfbW9iaWxlJywge2lkOiB0aGlzLnN0YXR1c0Jhci5pZCArICctZmlsZScsIGlkX21vYmlsZTogdGhpcy5zdGF0dXNCYXIuaWQgKyAnLWZpbGUtbW9iaWxlJ30pICsgJzwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c0Jhci5jaGlsZCgnIycgKyB0aGlzLnN0YXR1c0Jhci5pZCArICctZmlsZS1tb2JpbGUnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oZSwgaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVGaWxlcyhpbnB1dC5maWxlcywgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNCYXIuZG9tLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPVwidXBsb2FkLWJhclwiPiA8aW5wdXQgY2xhc3M9XCJoaWRkZW5cIiBuYW1lPVwibWRfZmlsZV8nKyB0aGlzLnN0YXR1c0Jhci5pZCArJ1wiIGlkPVwiJyArIHRoaXMuc3RhdHVzQmFyLmlkICsgJy1maWxlXCIgdHlwZT1cImZpbGVcIiBtdWx0aXBsZT4nICsgXygnbWFya2Rvd25lZGl0b3Iuc3RhdHVzX2Jhcl9tZXNzYWdlJywge2lkOiB0aGlzLnN0YXR1c0Jhci5pZCArICctZmlsZSd9KSArICc8L2Rpdj4nO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNCYXIuY2hpbGQoJyMnICsgdGhpcy5zdGF0dXNCYXIuaWQgKyAnLWZpbGUnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oZSwgaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVGaWxlcyhpbnB1dC5maWxlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXNCYXIgPSBFeHQuZ2V0KEV4dC5Eb21IZWxwZXIuYXBwZW5kKHRoaXMubWRDb250YWluZXIuZG9tLHtcbiAgICAgICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgICAgIGNsYXNzOiAnc3RhdHVzLWJhcicsXG4gICAgICAgICAgICAgICAgaHRtbDogXygnbWFya2Rvd25lZGl0b3Iuc3RhdHVzX2Jhcl9kaXNhYmxlZCcpXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICBFeHQuRG9tSGVscGVyLmFwcGVuZCh0aGlzLm1kQ29udGFpbmVyLmRvbSx7XG4gICAgICAgICAgICB0YWc6ICdzcGFuJyxcbiAgICAgICAgICAgIHN0eWxlOiAnY2xlYXI6IGJvdGgnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICxidWlsZFRvb2xib3g6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMudG9vbEJveCA9IEV4dC5nZXQoRXh0LkRvbUhlbHBlci5hcHBlbmQodGhpcy5zdGF0dXNCYXIse1xuICAgICAgICAgICAgdGFnOiAnZGl2JyxcbiAgICAgICAgICAgIGNsYXNzOiAndG9vbGJveCcsXG4gICAgICAgICAgICBjbjogW3tcbiAgICAgICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgICAgIGNsYXNzOiAncHJldmlldy1idXR0b24nLFxuICAgICAgICAgICAgICAgIGh0bWw6ICc8aSBjbGFzcz1cImljb24gaWNvbi1leWUgaWNvbi1sYXJnZVwiPjwvaT4nXG4gICAgICAgICAgICB9LHtcbiAgICAgICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgICAgIGNsYXNzOiAnc3BsaXRzY3JlZW4tYnV0dG9uJyxcbiAgICAgICAgICAgICAgICBodG1sOiAnPGkgY2xhc3M9XCJpY29uIGljb24tcGF1c2UgaWNvbi1sYXJnZVwiPjwvaT4nXG4gICAgICAgICAgICB9LHtcbiAgICAgICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgICAgIGNsYXNzOiAnZnVsbHNjcmVlbi1idXR0b24nLFxuICAgICAgICAgICAgICAgIGh0bWw6ICc8aSBjbGFzcz1cImljb24gaWNvbi1leHBhbmQgaWNvbi1sYXJnZVwiPjwvaT4nXG4gICAgICAgICAgICB9XVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMudG9vbEJveC5jaGlsZCgnLnNwbGl0c2NyZWVuLWJ1dHRvbicpLnR1cm5PbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZCgnaScpLnJlbW92ZUNsYXNzKCdpY29uLXBhdXNlJyk7XG4gICAgICAgICAgICB0aGlzLmNoaWxkKCdpJykuYWRkQ2xhc3MoJ2ljb24tc3RvcCcpO1xuXG4gICAgICAgICAgICB0aGF0LmNvbnRlbnRNRC5wYXJlbnQoKS5wYXJlbnQoKS5hZGRDbGFzcygnc3BsaXQnKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRvb2xCb3guY2hpbGQoJy5zcGxpdHNjcmVlbi1idXR0b24nKS50dXJuT2ZmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkKCdpJykuYWRkQ2xhc3MoJ2ljb24tcGF1c2UnKTtcbiAgICAgICAgICAgIHRoaXMuY2hpbGQoJ2knKS5yZW1vdmVDbGFzcygnaWNvbi1zdG9wJyk7XG5cbiAgICAgICAgICAgIHRoYXQuY29udGVudE1ELnBhcmVudCgpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdzcGxpdCcpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudG9vbEJveC5jaGlsZCgnLmZ1bGxzY3JlZW4tYnV0dG9uJykudHVybk9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkKCdpJykucmVtb3ZlQ2xhc3MoJ2ljb24tZXhwYW5kJyk7XG4gICAgICAgICAgICB0aGlzLmNoaWxkKCdpJykuYWRkQ2xhc3MoJ2ljb24tY29tcHJlc3MnKTtcblxuICAgICAgICAgICAgdmFyIG1vZHhCdXR0b25zID0gRXh0LmdldCgnbW9keC1hY3Rpb24tYnV0dG9ucycpO1xuICAgICAgICAgICAgaWYgKG1vZHhCdXR0b25zKSB7XG4gICAgICAgICAgICAgICAgbW9keEJ1dHRvbnMuYWRkQ2xhc3MoJ21hcmtkb3duZWRpdG9yLWZ1bGxzY3JlZW4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhhdC5mdWxsU2NyZWVuID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKHBhcnNlSW50KE1PRHguY29uZmlnWydtYXJrZG93bmVkaXRvci5nZW5lcmFsLnNwbGl0X2Z1bGxzY3JlZW4nXSB8fCAxKSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhhdC50b29sQm94LmNoaWxkKCcuc3BsaXRzY3JlZW4tYnV0dG9uJykudHVybk9uKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoYXQudG9vbEJveC5jaGlsZCgnLnNwbGl0c2NyZWVuLWJ1dHRvbicpLnR1cm5PZmYoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhhdC5zaG93UHJldmlldygpO1xuICAgICAgICAgICAgdGhhdC5zaG93Q29udGVudCgpO1xuXG4gICAgICAgICAgICB0aGF0LmVkaXRvci5mb2N1cygpO1xuXG4gICAgICAgICAgICB0aGF0LmNvbnRlbnRNRC5wYXJlbnQoKS5wYXJlbnQoKS5hZGRDbGFzcygnZnVsbHNjcmVlbicpO1xuXG4gICAgICAgICAgICB0aGF0LmVkaXRvci5zZXRPcHRpb24oJ21heExpbmVzJywgbnVsbCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50b29sQm94LmNoaWxkKCcuZnVsbHNjcmVlbi1idXR0b24nKS50dXJuT2ZmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkKCdpJykuYWRkQ2xhc3MoJ2ljb24tZXhwYW5kJyk7XG4gICAgICAgICAgICB0aGlzLmNoaWxkKCdpJykucmVtb3ZlQ2xhc3MoJ2ljb24tY29tcHJlc3MnKTtcblxuICAgICAgICAgICAgdmFyIG1vZHhCdXR0b25zID0gRXh0LmdldCgnbW9keC1hY3Rpb24tYnV0dG9ucycpO1xuICAgICAgICAgICAgaWYgKG1vZHhCdXR0b25zKSB7XG4gICAgICAgICAgICAgICAgbW9keEJ1dHRvbnMucmVtb3ZlQ2xhc3MoJ21hcmtkb3duZWRpdG9yLWZ1bGxzY3JlZW4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhhdC5mdWxsU2NyZWVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChwYXJzZUludChNT0R4LmNvbmZpZ1snbWFya2Rvd25lZGl0b3IuZ2VuZXJhbC5zcGxpdCddIHx8IDApID09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnRvb2xCb3guY2hpbGQoJy5zcGxpdHNjcmVlbi1idXR0b24nKS50dXJuT24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhhdC50b29sQm94LmNoaWxkKCcuc3BsaXRzY3JlZW4tYnV0dG9uJykudHVybk9mZigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGF0LmhpZGVQcmV2aWV3KCk7XG4gICAgICAgICAgICB0aGF0LnNob3dDb250ZW50KCk7XG5cbiAgICAgICAgICAgIHRoYXQuZWRpdG9yLmZvY3VzKCk7XG5cbiAgICAgICAgICAgIHRoYXQuY29udGVudE1ELnBhcmVudCgpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdmdWxsc2NyZWVuJyk7XG5cbiAgICAgICAgICAgIHRoYXQuZWRpdG9yLnNldE9wdGlvbignbWF4TGluZXMnLCBJbmZpbml0eSk7XG5cbiAgICAgICAgICAgIHRoYXQucHJldmlldy5maXhIZWlnaHQoKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAscmVnaXN0ZXJBY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmVkaXRvciA9IGFjZS5lZGl0KEV4dC5Eb21RdWVyeS5zZWxlY3ROb2RlKCdkaXYuJyArIHRoaXMubWRFbGVtZW50TmFtZSArICdfbWFya2Rvd24nKSk7XG4gICAgICAgIHRoaXMuZWRpdG9yLnNldE9wdGlvbnMoe1xuICAgICAgICAgICAgbWF4TGluZXM6IEluZmluaXR5LFxuICAgICAgICAgICAgbWluTGluZXM6IDI1LFxuICAgICAgICAgICAgZW5hYmxlQmFzaWNBdXRvY29tcGxldGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIHByaW50TWFyZ2luOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3dHdXR0ZXI6IHRydWUsXG4gICAgICAgICAgICB1c2VTb2Z0VGFiczogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dGb2xkV2lkZ2V0czogZmFsc2UsXG4gICAgICAgICAgICBzaG93TGluZU51bWJlcnM6IGZhbHNlLFxuICAgICAgICAgICAgZm9udFNpemU6IHBhcnNlSW50KE1PRHguY29uZmlnWydtYXJrZG93bmVkaXRvci5nZW5lcmFsLmZvbnRfc2l6ZSddKSB8fCAxMixcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IE1PRHguY29uZmlnWydtYXJrZG93bmVkaXRvci5nZW5lcmFsLmZvbnRfZmFtaWx5J10gfHwgJydcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWRpdG9yLmdldFNlc3Npb24oKS5zZXRVc2VXcmFwTW9kZSh0cnVlKTtcbiAgICAgICAgdGhpcy5lZGl0b3IuZ2V0U2Vzc2lvbigpLnNldFdyYXBMaW1pdFJhbmdlKCk7XG4gICAgICAgIHRoaXMuZWRpdG9yLnJlbmRlcmVyLnNldFNjcm9sbE1hcmdpbigxMCwgMTApO1xuICAgICAgICB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkuc2V0VmFsdWUodGhpcy50ZXh0YXJlYS5nZXRWYWx1ZSgpKTtcbiAgICAgICAgdGhpcy5lZGl0b3IuZ2V0U2Vzc2lvbigpLnNldE1vZGUoXCJhY2UvbW9kZS9tYXJrZG93bmVkaXRvclwiKTtcbiAgICAgICAgdGhpcy5lZGl0b3Iuc2V0VGhlbWUoXCJhY2UvdGhlbWUvXCIgKyAoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLmdlbmVyYWwudGhlbWUnXSB8fCAnbW9ub2thaScpKTtcblxuICAgICAgICB0aGlzLmVkaXRvci5jb21tYW5kcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW5kZW50IGxpc3RcIixcbiAgICAgICAgICAgIGJpbmRLZXk6IHt3aW46IFwiVGFiXCIsIG1hYzogXCJUYWJcIn0sXG4gICAgICAgICAgICBleGVjOiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGluZSA9IGVkaXRvci5zZXNzaW9uLmdldExpbmUoZWRpdG9yLmdldEN1cnNvclBvc2l0aW9uKCkucm93KTtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSAvXihcXHMqKSg/OihbLSsqXSl8KFxcZCspXFwuKShcXHMrKS8uZXhlYyhsaW5lKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNlc3Npb24uaW5kZW50Um93cyhlZGl0b3IuZ2V0Q3Vyc29yUG9zaXRpb24oKS5yb3csIGVkaXRvci5nZXRDdXJzb3JQb3NpdGlvbigpLnJvdywgJ1xcdCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5pbmRlbnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZWRpdG9yLmNvbW1hbmRzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgbmFtZTogXCJFeGl0IGZ1bGxzY3JlZW5cIixcbiAgICAgICAgICAgIGJpbmRLZXk6IHt3aW46IFwiRXNjXCIsIG1hYzogXCJFc2NcIn0sXG4gICAgICAgICAgICBleGVjOiBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9vbEJveC5jaGlsZCgnLmZ1bGxzY3JlZW4tYnV0dG9uJykudHVybk9mZigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgbGFuZ1Rvb2xzID0gYWNlLnJlcXVpcmUoXCJhY2UvZXh0L2xhbmd1YWdlX3Rvb2xzXCIpO1xuICAgICAgICB2YXIgcmVzb3VyY2VzQ29tcGxldGVyID0ge1xuICAgICAgICAgICAgZ2V0Q29tcGxldGlvbnM6IGZ1bmN0aW9uKGVkaXRvciwgc2Vzc2lvbiwgcG9zLCBwcmVmaXgsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZWZpeC5sZW5ndGggPT09IDApIHsgY2FsbGJhY2sobnVsbCwgW10pOyByZXR1cm4gfVxuXG4gICAgICAgICAgICAgICAgTU9EeC5BamF4LnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IG1hcmtkb3duRWRpdG9yLmNvbmZpZy5jb25uZWN0b3JVcmxcbiAgICAgICAgICAgICAgICAgICAgLHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnbWdyL3Jlc291cmNlL2dldGxpc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAscHJlZml4OiBwcmVmaXhcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByLnJlc3VsdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGxhbmdUb29scy5hZGRDb21wbGV0ZXIocmVzb3VyY2VzQ29tcGxldGVyKTtcblxuICAgICAgICB0aGlzLmVkaXRvci5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdlbnRlclwiLCB0aGlzLmNhdGNoQW5kRG9Ob3RoaW5nLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZWRpdG9yLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgdGhpcy5jYXRjaEFuZERvTm90aGluZywgZmFsc2UpO1xuICAgICAgICB0aGlzLmVkaXRvci5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgdGhpcy5kcm9wLmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICB9XG5cbiAgICAscmVnaXN0ZXJNYXJrZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnJlbWFya2FibGUgPSBuZXcgUmVtYXJrYWJsZSh7XG4gICAgICAgICAgICBodG1sOiB0cnVlLFxuICAgICAgICAgICAgaGlnaGxpZ2h0OiBmdW5jdGlvbiAoc3RyLCBsYW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKGxhbmcgJiYgaGxqcy5nZXRMYW5ndWFnZShsYW5nKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBobGpzLmhpZ2hsaWdodChsYW5nLCBzdHIpLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcW1xcWy9nLCAnJiM5MTsmIzkxOycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9dXS9nLCAnJiM5MzsmIzkzOycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGhsanMuaGlnaGxpZ2h0QXV0byhzdHIpLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxbXFxbL2csICcmIzkxOyYjOTE7Jyk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXV0vZywgJyYjOTM7JiM5MzsnKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZW1hcmthYmxlLmlubGluZS5ydWxlci5kaXNhYmxlKFsgJ2JhY2t0aWNrcycgXSk7XG4gICAgfVxuXG4gICAgLHBhcnNlOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5yZW1hcmthYmxlLnJlbmRlcihpbnB1dCk7XG5cbiAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoLyU1Qi9nLCAnWycpO1xuICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvJTVEL2csICddJyk7XG5cbiAgICAgICAgaWYgKE1PRHguY29uZmlnWydtYXJrZG93bmVkaXRvci5scC5wYXJzZV9tb2R4X3RhZ3MnXSA9PSAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJzZVJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wYXJzZVJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdGltZW91dCA9IHBhcnNlSW50KE1PRHguY29uZmlnWydtYXJrZG93bmVkaXRvci5scC5wYXJzZV9tb2R4X3RhZ3NfdGltZW91dCddIHx8IDMwMCk7XG5cbiAgICAgICAgICAgIHRoaXMucGFyc2VSZXF1ZXN0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIE1PRHguQWpheC5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBtYXJrZG93bkVkaXRvci5jb25maWcuY29ubmVjdG9yVXJsXG4gICAgICAgICAgICAgICAgICAgICxwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ21nci9lZGl0b3IvcHJvY2Vzc2NvbnRlbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAsY29udGVudDogb3V0cHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAscmVzb3VyY2U6IE1PRHgucmVxdWVzdC5pZFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpc1VwbG9hZCA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3LnVwZGF0ZShyLmRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodGhpcy5lZGl0b3IuZ2V0Q3Vyc29yUG9zaXRpb24oKS5yb3cgKyAyKSA+PSB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkuZ2V0RG9jdW1lbnQoKS5nZXRMZW5ndGgoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3LmRvbS5zY3JvbGxUb3AgPSB0aGlzLnByZXZpZXcuZG9tLnNjcm9sbEhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3LmZpeEhlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCB0aW1lb3V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJldmlldy51cGRhdGUob3V0cHV0KTtcblxuICAgICAgICAgICAgaWYgKCh0aGlzLmVkaXRvci5nZXRDdXJzb3JQb3NpdGlvbigpLnJvdyArIDIpID49IHRoaXMuZWRpdG9yLmdldFNlc3Npb24oKS5nZXREb2N1bWVudCgpLmdldExlbmd0aCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3LmRvbS5zY3JvbGxUb3AgPSB0aGlzLnByZXZpZXcuZG9tLnNjcm9sbEhlaWdodFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnByZXZpZXcuZml4SGVpZ2h0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRhTWFya2Rvd24uZG9tLnZhbHVlID0gdGhpcy5lZGl0b3IuZ2V0VmFsdWUoKTtcbiAgICAgICAgdGhpcy50ZXh0YXJlYS5kb20udmFsdWUgPSBvdXRwdXQ7XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICAsY2F0Y2hBbmREb05vdGhpbmc6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgICxkcm9wOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpZiAoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLnVwbG9hZC5lbmFibGVfaW1hZ2VfdXBsb2FkJ10gPT0gMSB8fCBNT0R4LmNvbmZpZ1snbWFya2Rvd25lZGl0b3IudXBsb2FkLmVuYWJsZV9maWxlX3VwbG9hZCddID09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRmlsZXMoZS5kYXRhVHJhbnNmZXIuZmlsZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLGhhbmRsZUZpbGVzOiBmdW5jdGlvbihmaWxlcywgbW9iaWxlKSB7XG4gICAgICAgIG1vYmlsZSA9IG1vYmlsZSB8fCAwO1xuXG4gICAgICAgIEV4dC5lYWNoKGZpbGVzLCBmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICB2YXIgaXNJbWFnZSA9IC9eaW1hZ2VcXC8vLnRlc3QoZmlsZS50eXBlKTtcblxuICAgICAgICAgICAgaWYgKGlzSW1hZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLnVwbG9hZC5lbmFibGVfaW1hZ2VfdXBsb2FkJ10gPT0gMCkgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2tUeXBlKE1PRHguY29uZmlnWydtYXJrZG93bmVkaXRvci51cGxvYWQuaW1hZ2VfdHlwZXMnXSwgZmlsZSkpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWxNZXNzYWdlKGZpbGUsICdpbWFnZScsIF8oJ21hcmtkb3duZWRpdG9yLmVyci51cGxvYWQudW5zdXBwb3J0ZWRfaW1hZ2UnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2tTaXplKGZpbGUuc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsTWVzc2FnZShmaWxlLCAnaW1hZ2UnLCBfKCdtYXJrZG93bmVkaXRvci5lcnIudXBsb2FkLnRvb19iaWcnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKE1PRHguY29uZmlnWydtYXJrZG93bmVkaXRvci5jcm9wcGVyLmVuYWJsZV9jcm9wcGVyJ10gPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBNT0R4LmxvYWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgeHR5cGU6ICdtYXJrZG93bmVkaXRvci13aW5kb3ctY3JvcHBlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICxmaWxlOiBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAsbWQ6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICxtb2JpbGU6IG1vYmlsZVxuICAgICAgICAgICAgICAgICAgICB9KS5zaG93KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRGaWxlKGZpbGUsICdpbWFnZScsIG1vYmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLnVwbG9hZC5lbmFibGVfZmlsZV91cGxvYWQnXSA9PSAwKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVja1R5cGUoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLnVwbG9hZC5maWxlX3R5cGVzJ10sIGZpbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbE1lc3NhZ2UoZmlsZSwgJ2ZpbGUnLCBfKCdtYXJrZG93bmVkaXRvci5lcnIudXBsb2FkLnVuc3VwcG9ydGVkX2ZpbGUnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrU2l6ZShmaWxlLnNpemUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbE1lc3NhZ2UoZmlsZSwgJ2ZpbGUnLCBfKCdtYXJrZG93bmVkaXRvci5lcnIudXBsb2FkLnRvb19iaWcnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy51cGxvYWRGaWxlKGZpbGUsICdmaWxlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LCB0aGlzKTtcbiAgICB9XG5cbiAgICAsY2hlY2tTaXplOiBmdW5jdGlvbihzaXplKXtcbiAgICAgICAgdmFyIG1heFNpemUgPSBNT0R4LmNvbmZpZ1snbWFya2Rvd25lZGl0b3IudXBsb2FkLm1heF9zaXplJ107XG4gICAgICAgIGlmICghbWF4U2l6ZSB8fCBtYXhTaXplID09ICcnKSBtYXhTaXplID0gKE1PRHguY29uZmlnWyd1cGxvYWRfbWF4c2l6ZSddIHx8ICcyMDk3MTUyJyk7XG5cbiAgICAgICAgbWF4U2l6ZSA9IHBhcnNlSW50KG1heFNpemUpO1xuXG4gICAgICAgIGlmIChtYXhTaXplID09IDApIHJldHVybiB0cnVlO1xuXG4gICAgICAgIHJldHVybiBzaXplIDw9IG1heFNpemU7XG4gICAgfVxuXG4gICAgLGNoZWNrVHlwZTogZnVuY3Rpb24oYWxsb3dlZFR5cGVzLCBmaWxlKSB7XG4gICAgICAgIGFsbG93ZWRUeXBlcyA9IGFsbG93ZWRUeXBlcy5zcGxpdCgnLCcpO1xuXG4gICAgICAgIHJldHVybiBhbGxvd2VkVHlwZXMuaW5kZXhPZihmaWxlLm5hbWUuc3BsaXQoJy4nKS5wb3AoKSkgIT0gLTE7XG4gICAgfVxuXG4gICAgLHVwbG9hZEZpbGU6IGZ1bmN0aW9uKGZpbGUsIHR5cGUsIG1vYmlsZSkge1xuICAgICAgICB0eXBlID0gdHlwZSB8fCAnZmlsZSc7XG4gICAgICAgIG1vYmlsZSA9IG1vYmlsZSB8fCAwO1xuXG4gICAgICAgIHZhciB1cGxvYWRlciA9IHRoaXMuY3JlYXRlVXBsb2FkZXIoKTtcblxuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnYWN0aW9uJywgJ21nci9lZGl0b3IvJyArIHR5cGUgKyAndXBsb2FkJyk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnbmFtZScsIGZpbGUubmFtZSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgncmVzb3VyY2UnLCB0aGlzLmNvbmZpZy5yZXNvdXJjZSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnbW9iaWxlJywgbW9iaWxlKTtcblxuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhoci5vcGVuKCdQT1NUJywgbWFya2Rvd25FZGl0b3IuY29uZmlnLmNvbm5lY3RvclVybCk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdQb3dlcmVkLUJ5JywgJ01PRHgnKTtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ21vZEF1dGgnLCBFeHQuQWpheC5kZWZhdWx0SGVhZGVycy5tb2RBdXRoKTtcblxuICAgICAgICB4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlID0gKGV2ZW50LmxvYWRlZCAvIGV2ZW50LnRvdGFsICogMTAwIHwgMCk7XG4gICAgICAgICAgICAgICAgdXBsb2FkZXIuY2hpbGQoJy5wcm9ncmVzcycpLnNldFdpZHRoKGNvbXBsZXRlICsgJyUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5zdWNjZXNzID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbWFnZVByZWZpeCA9ICh0eXBlID09ICdpbWFnZScpID8gJyEnIDogJyc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRMaW5lID0gKHR5cGUgPT0gJ2ltYWdlJykgPyAnXFxuXFxuJyA6ICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5pbnNlcnQoaW1hZ2VQcmVmaXggKyAnWycgKyByZXMub2JqZWN0Lm5hbWUgKyAnXSgnICsgcmVzLm9iamVjdC5wYXRoICsgJyBcIicgKyByZXMub2JqZWN0Lm5hbWUgKyAnXCIpJyArIGVuZExpbmUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbFVwbG9hZGVyKHVwbG9hZGVyLCByZXMubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LmJpbmQodGhpcyk7XG5cbiAgICAgICAgeGhyLnNlbmQoZm9ybURhdGEpO1xuICAgIH1cblxuICAgICxjcmVhdGVVcGxvYWRlcjogZnVuY3Rpb24odHlwZSwgZmlsZU5hbWUpIHtcbiAgICAgICAgdmFyIHVwbG9hZGVyID0gRXh0LkRvbUhlbHBlci5pbnNlcnRGaXJzdCh0aGlzLnN0YXR1c0Jhcix7XG4gICAgICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICAgICAgaHRtbDogJzxkaXYgY2xhc3M9XCJwcm9ncmVzc1wiPjxpIGNsYXNzPVwiaWNvbiBpY29uLXNwaW5uZXIgaWNvbi1zcGluXCI+PC9pPiA8c3Bhbj4nICsgXygnbWFya2Rvd25lZGl0b3IudXBsb2FkaW5nXycgKyB0eXBlKSArIGZpbGVOYW1lICsgJzwvc3Bhbj48L2Rpdj4nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBFeHQuZ2V0KHVwbG9hZGVyKTtcbiAgICB9XG5cbiAgICAsZmFpbFVwbG9hZGVyOiBmdW5jdGlvbih1cGxvYWRlciwgbWVzc2FnZSkge1xuICAgICAgICB1cGxvYWRlci5jaGlsZCgnLnByb2dyZXNzJykuYWRkQ2xhc3MoJ2Vycm9yJyk7XG4gICAgICAgIHVwbG9hZGVyLmNoaWxkKCcucHJvZ3Jlc3MnKS5zZXRXaWR0aCgnMTAwJScpO1xuXG4gICAgICAgIHVwbG9hZGVyLmNoaWxkKCdpJykuYWRkQ2xhc3MoJ3JlbW92ZS1tZXNzYWdlJyk7XG4gICAgICAgIHVwbG9hZGVyLmNoaWxkKCdpJykucmVwbGFjZUNsYXNzKCdpY29uLXNwaW5uZXInLCAnaWNvbi1yZW1vdmUnKTtcbiAgICAgICAgdXBsb2FkZXIuY2hpbGQoJ2knKS5yZW1vdmVDbGFzcygnaWNvbi1zcGluJyk7XG5cbiAgICAgICAgdXBsb2FkZXIuY2hpbGQoJ3NwYW4nKS5kb20uaW5uZXJIVE1MICs9ICcgZmFpbGVkLiAnICsgbWVzc2FnZTtcbiAgICAgICAgdXBsb2FkZXIuY2hpbGQoJy5yZW1vdmUtbWVzc2FnZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdXBsb2FkZXIucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICxmYWlsTWVzc2FnZTogZnVuY3Rpb24oZmlsZSwgdHlwZSwgbWVzc2FnZSkge1xuICAgICAgICB2YXIgdXBsb2FkZXIgPSB0aGlzLmNyZWF0ZVVwbG9hZGVyKHR5cGUsIGZpbGUubmFtZSk7XG4gICAgICAgIHRoaXMuZmFpbFVwbG9hZGVyKHVwbG9hZGVyLCBtZXNzYWdlKTtcbiAgICB9XG5cbiAgICAsaXNNb2JpbGVEZXZpY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cub3JpZW50YXRpb24gIT09IFwidW5kZWZpbmVkXCIpIHx8IChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0lFTW9iaWxlJykgIT09IC0xKTtcbiAgICB9XG59KTtcblxuTU9EeC5sb2FkUlRFID0gZnVuY3Rpb24oaWQpIHtcbiAgICBuZXcgbWFya2Rvd25FZGl0b3IuRWRpdG9yKHtcbiAgICAgICAgbWRFbGVtZW50SWQ6IGlkXG4gICAgfSk7XG59O1xuXG5NT0R4LmFmdGVyVFZMb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVscyA9IEV4dC5xdWVyeSgndGV4dGFyZWEubW9keC1yaWNodGV4dCcpO1xuXG4gICAgRXh0LmVhY2goZWxzLCBmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgZWxlbWVudCA9IEV4dC5nZXQoZWxlbWVudCk7XG4gICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgaWYgKG1hcmtkb3duRWRpdG9yLmxvYWRlZEVsZW1lbnRzW2VsZW1lbnQuaWRdKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBtYXJrZG93bkVkaXRvci5sb2FkZWRFbGVtZW50c1tlbGVtZW50LmlkXSA9IG5ldyBtYXJrZG93bkVkaXRvci5FZGl0b3Ioe1xuICAgICAgICAgICAgbWRFbGVtZW50SWQ6IGVsZW1lbnQuaWRcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxufTtcblxuTU9EeC51bmxvYWRUVlJURSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbHMgPSBFeHQucXVlcnkoJy5tb2R4LXJpY2h0ZXh0Jyk7XG5cbiAgICBFeHQuZWFjaChlbHMsIGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgICBlbGVtZW50ID0gRXh0LmdldChlbGVtZW50KTtcbiAgICAgICAgaWYgKCFlbGVtZW50KSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBpZiAoIW1hcmtkb3duRWRpdG9yLmxvYWRlZEVsZW1lbnRzW2VsZW1lbnQuaWRdKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBtYXJrZG93bkVkaXRvci5sb2FkZWRFbGVtZW50c1tlbGVtZW50LmlkXS5kZXN0cm95KCk7XG5cbiAgICB9KTtcbn07IiwibWFya2Rvd25FZGl0b3IuY29tYm8uQ3JvcHBlclByb2ZpbGUgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoTU9EeC5jb25maWdbJ21hcmtkb3duZWRpdG9yLmNyb3BwZXIucHJvZmlsZXMnXSB8fCAnW10nKTtcblxuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBFeHQuYXBwbHlJZihjb25maWcse1xuICAgICAgICBzdG9yZTogbmV3IEV4dC5kYXRhLkpzb25TdG9yZSh7XG4gICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICAsZmllbGRzOiBbJ25hbWUnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3JhdGlvJ11cbiAgICAgICAgfSlcbiAgICAgICAgLGRpc3BsYXlGaWVsZDogJ25hbWUnXG4gICAgICAgICxtb2RlOiAnbG9jYWwnXG4gICAgICAgICx2YWx1ZUZpZWxkOiAnbmFtZSdcbiAgICAgICAgLGVkaXRhYmxlOiBmYWxzZVxuICAgICAgICAsdmFsdWU6IGRhdGFbMF0gPyBkYXRhWzBdLm5hbWUgOiAnJ1xuICAgIH0pO1xuXG4gICAgdmFyIHNob3dEZXNjcmlwdGlvbiA9IHBhcnNlSW50KE1PRHguY29uZmlnWydtYXJrZG93bmVkaXRvci5jcm9wcGVyLnNob3dfZGVzY3JpcHRpb24nXSB8fCAwKTtcbiAgICBpZiAoc2hvd0Rlc2NyaXB0aW9uKSB7XG4gICAgICAgIGNvbmZpZy50cGwgPSBuZXcgRXh0LlhUZW1wbGF0ZSgnPHRwbCBmb3I9XCIuXCI+PGRpdiBjbGFzcz1cIngtY29tYm8tbGlzdC1pdGVtXCI+PHNwYW4gc3R5bGU9XCJmb250LXdlaWdodDogYm9sZFwiPntuYW1lfTwvc3Bhbj4nXG4gICAgICAgICAgICAsJzxiciAvPjx0cGwgaWY9XCJ3aWR0aFwiPlc6e3dpZHRofSA8L3RwbD48dHBsIGlmPVwiaGVpZ2h0XCI+SDp7aGVpZ2h0fSA8L3RwbD48dHBsIGlmPVwicmF0aW9cIj5SOntyYXRpb308L3RwbD48L2Rpdj48L3RwbD4nKTtcbiAgICB9XG5cbiAgICBtYXJrZG93bkVkaXRvci5jb21iby5Dcm9wcGVyUHJvZmlsZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxjb25maWcpO1xufTtcbkV4dC5leHRlbmQobWFya2Rvd25FZGl0b3IuY29tYm8uQ3JvcHBlclByb2ZpbGUsTU9EeC5jb21iby5Db21ib0JveCk7XG5FeHQucmVnKCdtYXJrZG93bmVkaXRvci1jb21iby1jcm9wcGVyLXByb2ZpbGUnLG1hcmtkb3duRWRpdG9yLmNvbWJvLkNyb3BwZXJQcm9maWxlKTsiLCJtYXJrZG93bkVkaXRvci53aW5kb3cuQ3JvcHBlciA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBjb25maWcuY3JvcHBlclNlbGVjdG9yID0gY29uZmlnLmNyb3BwZXJTZWxlY3RvciB8fCAnLmltYWdlLXVwbG9hZC13cmFwcGVyID4gaW1nJztcblxuICAgIHZhciBpZCA9IEV4dC5pZCgpO1xuXG4gICAgRXh0LmFwcGx5SWYoY29uZmlnLHtcbiAgICAgICAgbW9kYWw6IGZhbHNlXG4gICAgICAgICxsYXlvdXQ6ICdhdXRvJ1xuICAgICAgICAsY2xvc2VBY3Rpb246ICdoaWRlJ1xuICAgICAgICAsc2hhZG93OiB0cnVlXG4gICAgICAgICxyZXNpemFibGU6IHRydWVcbiAgICAgICAgLGNvbGxhcHNpYmxlOiB0cnVlXG4gICAgICAgICxtYXhpbWl6YWJsZTogZmFsc2VcbiAgICAgICAgLGF1dG9IZWlnaHQ6IGZhbHNlXG4gICAgICAgICxhdXRvU2Nyb2xsOiB0cnVlXG4gICAgICAgICxhbGxvd0Ryb3A6IHRydWVcbiAgICAgICAgLHdpZHRoOiA4MDBcbiAgICAgICAgLG1vYmlsZTogMFxuICAgICAgICAsdGl0bGU6IF8oJ21hcmtkb3duZWRpdG9yLmNyb3BwZXIuY3JvcF9pbWFnZScpXG4gICAgICAgICxjbHM6ICdtb2R4LXdpbmRvdyBtYXJrZG93bmVkaXRvci1jcm9wcGVyLXdpbmRvdydcbiAgICAgICAgLGl0ZW1zOlt7XG4gICAgICAgICAgICBsYXlvdXQ6ICdjb2x1bW4nXG4gICAgICAgICAgICAsYm9yZGVyOiBmYWxzZVxuICAgICAgICAgICAgLGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgbGF5b3V0OiAnZm9ybSdcbiAgICAgICAgICAgICAgICAsbGFiZWxBbGlnbjogJ3RvcCdcbiAgICAgICAgICAgICAgICAsbGFiZWxTZXBhcmF0b3I6ICcnXG4gICAgICAgICAgICAgICAgLGFuY2hvcjogJzEwMCUnXG4gICAgICAgICAgICAgICAgLGJvcmRlcjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICxpdGVtczogW3tcbiAgICAgICAgICAgICAgICBjb2x1bW5XaWR0aDogMC4xXG4gICAgICAgICAgICAgICAgLGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgICAgIG1zZ1RhcmdldDogJ3VuZGVyJ1xuICAgICAgICAgICAgICAgICAgICAsYW5jaG9yOiAnMTAwJSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLGNsczogJ21hcmtkb3duZWRpdG9yLXRvb2xiYXInXG4gICAgICAgICAgICAgICAgLGl0ZW1zOiBbe1xuICAgICAgICAgICAgICAgICAgICB4dHlwZTogJ2J1dHRvbidcbiAgICAgICAgICAgICAgICAgICAgLHRleHQ6ICc8aSBjbGFzcz1cImljb24gaWNvbi1hcnJvd3MgaWNvbi1sYXJnZVwiPjwvaT4nXG4gICAgICAgICAgICAgICAgICAgICx0b29sdGlwOiBfKCdtYXJrZG93bmVkaXRvci5jcm9wcGVyLm1vdmUnKVxuICAgICAgICAgICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgLHBhcmFtOiAnbW92ZSdcbiAgICAgICAgICAgICAgICAgICAgLGFjdGlvbjogJ3NldERyYWdNb2RlJ1xuICAgICAgICAgICAgICAgICAgICAsaGFuZGxlcjogdGhpcy5jYWxsQ3JvcHBlckFjdGlvblxuICAgICAgICAgICAgICAgIH0se1xuICAgICAgICAgICAgICAgICAgICB4dHlwZTogJ2J1dHRvbidcbiAgICAgICAgICAgICAgICAgICAgLHRleHQ6ICc8aSBjbGFzcz1cImljb24gaWNvbi1jcm9wIGljb24tbGFyZ2VcIj48L2k+J1xuICAgICAgICAgICAgICAgICAgICAsdG9vbHRpcDogXygnbWFya2Rvd25lZGl0b3IuY3JvcHBlci5jcm9wJylcbiAgICAgICAgICAgICAgICAgICAgLHNjb3BlOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgICxwYXJhbTogJ2Nyb3AnXG4gICAgICAgICAgICAgICAgICAgICxhY3Rpb246ICdzZXREcmFnTW9kZSdcbiAgICAgICAgICAgICAgICAgICAgLGhhbmRsZXI6IHRoaXMuY2FsbENyb3BwZXJBY3Rpb25cbiAgICAgICAgICAgICAgICB9LHtcbiAgICAgICAgICAgICAgICAgICAgeHR5cGU6ICdidXR0b24nXG4gICAgICAgICAgICAgICAgICAgICx0ZXh0OiAnPGkgY2xhc3M9XCJpY29uIGljb24tc2VhcmNoLXBsdXMgaWNvbi1sYXJnZVwiPjwvaT4nXG4gICAgICAgICAgICAgICAgICAgICx0b29sdGlwOiBfKCdtYXJrZG93bmVkaXRvci5jcm9wcGVyLnpvb21faW4nKVxuICAgICAgICAgICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgLHBhcmFtOiAwLjFcbiAgICAgICAgICAgICAgICAgICAgLGFjdGlvbjogJ3pvb20nXG4gICAgICAgICAgICAgICAgICAgICxoYW5kbGVyOiB0aGlzLmNhbGxDcm9wcGVyQWN0aW9uXG4gICAgICAgICAgICAgICAgfSx7XG4gICAgICAgICAgICAgICAgICAgIHh0eXBlOiAnYnV0dG9uJ1xuICAgICAgICAgICAgICAgICAgICAsdGV4dDogJzxpIGNsYXNzPVwiaWNvbiBpY29uLXNlYXJjaC1taW51cyBpY29uLWxhcmdlXCI+PC9pPidcbiAgICAgICAgICAgICAgICAgICAgLHRvb2x0aXA6IF8oJ21hcmtkb3duZWRpdG9yLmNyb3BwZXIuem9vbV9vdXQnKVxuICAgICAgICAgICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgLHBhcmFtOiAtMC4xXG4gICAgICAgICAgICAgICAgICAgICxhY3Rpb246ICd6b29tJ1xuICAgICAgICAgICAgICAgICAgICAsaGFuZGxlcjogdGhpcy5jYWxsQ3JvcHBlckFjdGlvblxuICAgICAgICAgICAgICAgIH0se1xuICAgICAgICAgICAgICAgICAgICB4dHlwZTogJ2J1dHRvbidcbiAgICAgICAgICAgICAgICAgICAgLHRleHQ6ICc8aSBjbGFzcz1cImljb24gaWNvbi1yb3RhdGUtbGVmdCBpY29uLWxhcmdlXCI+PC9pPidcbiAgICAgICAgICAgICAgICAgICAgLHRvb2x0aXA6IF8oJ21hcmtkb3duZWRpdG9yLmNyb3BwZXIucm90YXRlX2xlZnQnKVxuICAgICAgICAgICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgLHBhcmFtOiAtOTBcbiAgICAgICAgICAgICAgICAgICAgLGFjdGlvbjogJ3JvdGF0ZSdcbiAgICAgICAgICAgICAgICAgICAgLGhhbmRsZXI6IHRoaXMuY2FsbENyb3BwZXJBY3Rpb25cbiAgICAgICAgICAgICAgICB9LHtcbiAgICAgICAgICAgICAgICAgICAgeHR5cGU6ICdidXR0b24nXG4gICAgICAgICAgICAgICAgICAgICx0ZXh0OiAnPGkgY2xhc3M9XCJpY29uIGljb24tcm90YXRlLXJpZ2h0IGljb24tbGFyZ2VcIj48L2k+J1xuICAgICAgICAgICAgICAgICAgICAsdG9vbHRpcDogXygnbWFya2Rvd25lZGl0b3IuY3JvcHBlci5yb3RhdGVfcmlnaHQnKVxuICAgICAgICAgICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgLHBhcmFtOiA5MFxuICAgICAgICAgICAgICAgICAgICAsYWN0aW9uOiAncm90YXRlJ1xuICAgICAgICAgICAgICAgICAgICAsaGFuZGxlcjogdGhpcy5jYWxsQ3JvcHBlckFjdGlvblxuICAgICAgICAgICAgICAgIH0se1xuICAgICAgICAgICAgICAgICAgICB4dHlwZTogJ2J1dHRvbidcbiAgICAgICAgICAgICAgICAgICAgLHRleHQ6ICc8aSBjbGFzcz1cImljb24gaWNvbi1yZW1vdmUgaWNvbi1sYXJnZVwiPjwvaT4nXG4gICAgICAgICAgICAgICAgICAgICx0b29sdGlwOiBfKCdtYXJrZG93bmVkaXRvci5jcm9wcGVyLmNsZWFyX2Nyb3BwZXInKVxuICAgICAgICAgICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgLHBhcmFtOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICxhY3Rpb246ICdjbGVhcidcbiAgICAgICAgICAgICAgICAgICAgLGhhbmRsZXI6IHRoaXMuY2FsbENyb3BwZXJBY3Rpb25cbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSx7XG4gICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6IDAuOVxuICAgICAgICAgICAgICAgICxkZWZhdWx0czoge1xuICAgICAgICAgICAgICAgICAgICBtc2dUYXJnZXQ6ICd1bmRlcidcbiAgICAgICAgICAgICAgICAgICAgLGFuY2hvcjogJzEwMCUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICxjbHM6ICdtYXJrZG93bmVkaXRvci1jcm9wcGVyJ1xuICAgICAgICAgICAgICAgICxpdGVtczogW3tcbiAgICAgICAgICAgICAgICAgICAgaHRtbDogJzxkaXYgY2xhc3M9XCJpbWFnZS11cGxvYWQtd3JhcHBlclwiPjxpbWcgc3JjPVwiJyArIFVSTC5jcmVhdGVPYmplY3RVUkwoY29uZmlnLmZpbGUpICsgJ1wiPjwvZGl2PidcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfV1cbiAgICAgICAgfV1cbiAgICAgICAgLGJiYXI6IFt7XG4gICAgICAgICAgICB4dHlwZTogJ21hcmtkb3duZWRpdG9yLWNvbWJvLWNyb3BwZXItcHJvZmlsZSdcbiAgICAgICAgICAgICxpZDogaWQgKyAnLWNyb3BwZXItcHJvZmlsZSdcbiAgICAgICAgICAgICxsaXN0ZW5lcnM6IHtcbiAgICAgICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uKGNvbWJvLCB2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZUNyb3BwZXJQcm9maWxlKHZhbHVlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogdGhpc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwnLT4nLHtcbiAgICAgICAgICAgIHRleHQ6IF8oJ2NhbmNlbCcpXG4gICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICxoYW5kbGVyOiB0aGlzLmNsb3NlXG4gICAgICAgIH0se1xuICAgICAgICAgICAgdGV4dDogXygnbWFya2Rvd25lZGl0b3IuY3JvcHBlci51cGxvYWQnKVxuICAgICAgICAgICAgLGNsczogJ3ByaW1hcnktYnV0dG9uJ1xuICAgICAgICAgICAgLHNjb3BlOiB0aGlzXG4gICAgICAgICAgICAsY3JvcDogMFxuICAgICAgICAgICAgLGhhbmRsZXI6IHRoaXMudXBsb2FkXG4gICAgICAgIH0se1xuICAgICAgICAgICAgdGV4dDogXygnbWFya2Rvd25lZGl0b3IuY3JvcHBlci5jcm9wX3VwbG9hZCcpXG4gICAgICAgICAgICAsY2xzOiAncHJpbWFyeS1idXR0b24nXG4gICAgICAgICAgICAsc2NvcGU6IHRoaXNcbiAgICAgICAgICAgICxjcm9wOiAxXG4gICAgICAgICAgICAsaGFuZGxlcjogdGhpcy51cGxvYWRcbiAgICAgICAgfV1cbiAgICAgICAgLGxpc3RlbmVyczoge1xuICAgICAgICAgICAgJ3Nob3cnOiB7XG4gICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3JvcHBlck9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY3JvcHBlckVsID0gJCgnIycgKyB0aGlzLmlkICsgJyAnICsgY29uZmlnLmNyb3BwZXJTZWxlY3Rvcik7XG5cbiAgICAgICAgICAgICAgICAgICAgY3JvcHBlck9wdGlvbnMuY3JvcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmltYWdlRGF0YSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAne1wieFwiOicgKyBkYXRhLngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wieVwiOicgKyBkYXRhLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiaGVpZ2h0XCI6JyArIGRhdGEuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIndpZHRoXCI6JyArIGRhdGEud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wicm90YXRlXCI6JyArIGRhdGEucm90YXRlICsgJ30nXG4gICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNyb3BwZXJFbC5jcm9wcGVyKGNyb3BwZXJPcHRpb25zKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZSA9IEV4dC5nZXRDbXAoaWQgKyAnLWNyb3BwZXItcHJvZmlsZScpLnN0b3JlLmdldEF0KDApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZUNyb3BwZXJQcm9maWxlKHByb2ZpbGUuZGF0YSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzY29wZTogdGhpc1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgbWFya2Rvd25FZGl0b3Iud2luZG93LkNyb3BwZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsY29uZmlnKTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcblxufTtcbkV4dC5leHRlbmQobWFya2Rvd25FZGl0b3Iud2luZG93LkNyb3BwZXIsIEV4dC5XaW5kb3cse1xuICAgIGltYWdlRGF0YTogJydcbiAgICAsY3JvcHBlclByb2ZpbGU6IHtuYW1lOiAnJ31cblxuICAgICxjaGFuZ2VDcm9wcGVyUHJvZmlsZTogZnVuY3Rpb24ocHJvZmlsZSl7XG4gICAgICAgIHZhciByYXRpbztcblxuICAgICAgICBpZiAocHJvZmlsZS5yYXRpbyAhPSBcIlwiKSB7XG4gICAgICAgICAgICByYXRpbyA9IHByb2ZpbGUucmF0aW87XG4gICAgICAgICAgICByYXRpby5yZXBsYWNlKC9bXi06eCgpXFxkLyorLl0vZywgJycpO1xuICAgICAgICAgICAgcmF0aW8gPSBldmFsKHJhdGlvKSB8fCBOYU47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJvZmlsZS53aWR0aCAmJiBwcm9maWxlLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHBhcnNlSW50KHByb2ZpbGUud2lkdGgpO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChwcm9maWxlLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gMCAmJiBoZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhdGlvID0gd2lkdGggLyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmF0aW8gPSBOYU47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByYXRpbyA9IE5hTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3JvcHBlclByb2ZpbGUgPSBwcm9maWxlO1xuXG4gICAgICAgIHRoaXMuY2FsbENyb3BwZXJBY3Rpb24oe2FjdGlvbjogJ3NldEFzcGVjdFJhdGlvJywgcGFyYW06IHJhdGlvfSk7XG4gICAgfVxuXG4gICAgLHVwbG9hZDogZnVuY3Rpb24oYnV0dG9uKSB7XG4gICAgICAgIHZhciB1cGxvYWRlciA9IHRoaXMuY29uZmlnLm1kLmNyZWF0ZVVwbG9hZGVyKCdpbWFnZScsIHRoaXMuY29uZmlnLmZpbGUubmFtZSk7XG5cbiAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIHRoaXMuY29uZmlnLmZpbGUpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2FjdGlvbicsICdtZ3IvZWRpdG9yL2ltYWdldXBsb2FkJyk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnaW1hZ2VEYXRhJywgdGhpcy5pbWFnZURhdGEpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ25hbWUnLCB0aGlzLmNvbmZpZy5maWxlLm5hbWUpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2Nyb3AnLCBidXR0b24uY3JvcCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgncmVzb3VyY2UnLCB0aGlzLmNvbmZpZy5tZC5jb25maWcucmVzb3VyY2UpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ21vYmlsZScsIHRoaXMuY29uZmlnLm1vYmlsZSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgncHJvZmlsZScsIHRoaXMuY3JvcHBlclByb2ZpbGUubmFtZSk7XG5cbiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbignUE9TVCcsIG1hcmtkb3duRWRpdG9yLmNvbmZpZy5jb25uZWN0b3JVcmwpO1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignUG93ZXJlZC1CeScsICdNT0R4Jyk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdtb2RBdXRoJywgRXh0LkFqYXguZGVmYXVsdEhlYWRlcnMubW9kQXV0aCk7XG5cbiAgICAgICAgeGhyLnVwbG9hZC5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQubGVuZ3RoQ29tcHV0YWJsZSkge1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZSA9IChldmVudC5sb2FkZWQgLyBldmVudC50b3RhbCAqIDEwMCB8IDApO1xuICAgICAgICAgICAgICAgIHVwbG9hZGVyLmNoaWxkKCcucHJvZ3Jlc3MnKS5zZXRXaWR0aChjb21wbGV0ZSArICclJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlcy5zdWNjZXNzID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm1kLmVkaXRvci5pbnNlcnQoJyFbJyArIHJlcy5vYmplY3QubmFtZSArICddKCcgKyByZXMub2JqZWN0LnBhdGggKyAnIFwiJyArIHJlcy5vYmplY3QubmFtZSArICdcIilcXG5cXG4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5tZC5mYWlsVXBsb2FkZXIodXBsb2FkZXIsIHJlcy5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgICAgICB4aHIuc2VuZChmb3JtRGF0YSk7XG5cbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cblxuICAgICxjYWxsQ3JvcHBlckFjdGlvbjogZnVuY3Rpb24oYnRuKSB7XG4gICAgICAgIHRoaXMuJGNyb3BwZXJFbC5jcm9wcGVyKGJ0bi5hY3Rpb24sIGJ0bi5wYXJhbSk7XG4gICAgfVxuXG4gICAgLGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy4kY3JvcHBlckVsLmNyb3BwZXIoXCJkZXN0cm95XCIpO1xuXG4gICAgICAgIG1hcmtkb3duRWRpdG9yLndpbmRvdy5Dcm9wcGVyLnN1cGVyY2xhc3MuY2xvc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5jb25maWcubWQuZWRpdG9yLmZvY3VzKCk7XG4gICAgfVxufSk7XG5FeHQucmVnKCdtYXJrZG93bmVkaXRvci13aW5kb3ctY3JvcHBlcicsbWFya2Rvd25FZGl0b3Iud2luZG93LkNyb3BwZXIpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9